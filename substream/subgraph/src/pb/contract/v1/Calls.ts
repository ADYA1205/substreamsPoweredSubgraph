// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Acofee_RenounceOwnershipCall } from "./Acofee_RenounceOwnershipCall";
import { Acofee_SetAconomyNftLendBorrowFeeCall } from "./Acofee_SetAconomyNftLendBorrowFeeCall";
import { Acofee_SetAconomyPiMarketFeeCall } from "./Acofee_SetAconomyPiMarketFeeCall";
import { Acofee_SetAconomyPoolFeeCall } from "./Acofee_SetAconomyPoolFeeCall";
import { Acofee_TransferOwnershipCall } from "./Acofee_TransferOwnershipCall";
import { Pinft_AddTrustedForwarderCall } from "./Pinft_AddTrustedForwarderCall";
import { Pinft_ApproveCall } from "./Pinft_ApproveCall";
import { Pinft_DeleteNftCall } from "./Pinft_DeleteNftCall";
import { Pinft_DeleteValidatorRoyaltiesCall } from "./Pinft_DeleteValidatorRoyaltiesCall";
import { Pinft_InitializeCall } from "./Pinft_InitializeCall";
import { Pinft_LazyMintNftCall } from "./Pinft_LazyMintNftCall";
import { Pinft_MintNftCall } from "./Pinft_MintNftCall";
import { Pinft_PauseCall } from "./Pinft_PauseCall";
import { Pinft_RemoveTrustedForwarderCall } from "./Pinft_RemoveTrustedForwarderCall";
import { Pinft_RenounceOwnershipCall } from "./Pinft_RenounceOwnershipCall";
import { Pinft_SafeTransferFrom1call } from "./Pinft_SafeTransferFrom1call";
import { Pinft_SafeTransferFrom2call } from "./Pinft_SafeTransferFrom2call";
import { Pinft_SetApprovalForAllCall } from "./Pinft_SetApprovalForAllCall";
import { Pinft_SetRoyaltiesForValidatorCall } from "./Pinft_SetRoyaltiesForValidatorCall";
import { Pinft_TransferFromCall } from "./Pinft_TransferFromCall";
import { Pinft_TransferOwnershipCall } from "./Pinft_TransferOwnershipCall";
import { Pinft_UnpauseCall } from "./Pinft_UnpauseCall";
import { Pinft_UpgradeToCall } from "./Pinft_UpgradeToCall";
import { Pinft_UpgradeToAndCallCall } from "./Pinft_UpgradeToAndCallCall";
import { Pimeth_RepayCall } from "./Pimeth_RepayCall";
import { Pimeth_AddErc20call } from "./Pimeth_AddErc20call";
import { Pimeth_AddTrustedForwarderCall } from "./Pimeth_AddTrustedForwarderCall";
import { Pimeth_AddValidatorCall } from "./Pimeth_AddValidatorCall";
import { Pimeth_InitializeCall } from "./Pimeth_InitializeCall";
import { Pimeth_LazyAddValidatorCall } from "./Pimeth_LazyAddValidatorCall";
import { Pimeth_OnErc721ReceivedCall } from "./Pimeth_OnErc721ReceivedCall";
import { Pimeth_PaidCommissionCall } from "./Pimeth_PaidCommissionCall";
import { Pimeth_PauseCall } from "./Pimeth_PauseCall";
import { Pimeth_RedeemOrBurnPiNftCall } from "./Pimeth_RedeemOrBurnPiNftCall";
import { Pimeth_RemoveTrustedForwarderCall } from "./Pimeth_RemoveTrustedForwarderCall";
import { Pimeth_RenounceOwnershipCall } from "./Pimeth_RenounceOwnershipCall";
import { Pimeth_SetPiMarketCall } from "./Pimeth_SetPiMarketCall";
import { Pimeth_TransferOwnershipCall } from "./Pimeth_TransferOwnershipCall";
import { Pimeth_UnpauseCall } from "./Pimeth_UnpauseCall";
import { Pimeth_UpgradeToCall } from "./Pimeth_UpgradeToCall";
import { Pimeth_UpgradeToAndCallCall } from "./Pimeth_UpgradeToAndCallCall";
import { Pimeth_WithdrawCall } from "./Pimeth_WithdrawCall";
import { Pimark_BidCall } from "./Pimark_BidCall";
import { Pimark_BuyNftCall } from "./Pimark_BuyNftCall";
import { Pimark_SellNftByBidCall } from "./Pimark_SellNftByBidCall";
import { Pimark_AcceptSwapRequestCall } from "./Pimark_AcceptSwapRequestCall";
import { Pimark_CancelSaleCall } from "./Pimark_CancelSaleCall";
import { Pimark_CancelSwapCall } from "./Pimark_CancelSwapCall";
import { Pimark_EditSalePriceCall } from "./Pimark_EditSalePriceCall";
import { Pimark_ExecuteBidOrderCall } from "./Pimark_ExecuteBidOrderCall";
import { Pimark_InitializeCall } from "./Pimark_InitializeCall";
import { Pimark_MakeSwapRequestCall } from "./Pimark_MakeSwapRequestCall";
import { Pimark_OnErc721ReceivedCall } from "./Pimark_OnErc721ReceivedCall";
import { Pimark_PauseCall } from "./Pimark_PauseCall";
import { Pimark_RenounceOwnershipCall } from "./Pimark_RenounceOwnershipCall";
import { Pimark_SellNftCall } from "./Pimark_SellNftCall";
import { Pimark_TransferOwnershipCall } from "./Pimark_TransferOwnershipCall";
import { Pimark_UnpauseCall } from "./Pimark_UnpauseCall";
import { Pimark_UpgradeToCall } from "./Pimark_UpgradeToCall";
import { Pimark_UpgradeToAndCallCall } from "./Pimark_UpgradeToAndCallCall";
import { Pimark_WithdrawBidMoneyCall } from "./Pimark_WithdrawBidMoneyCall";
import { Validatednft_ApproveCall } from "./Validatednft_ApproveCall";
import { Validatednft_DeleteNftCall } from "./Validatednft_DeleteNftCall";
import { Validatednft_DeleteValidatorRoyaltiesCall } from "./Validatednft_DeleteValidatorRoyaltiesCall";
import { Validatednft_InitializeCall } from "./Validatednft_InitializeCall";
import { Validatednft_MintValidatedNftCall } from "./Validatednft_MintValidatedNftCall";
import { Validatednft_OnErc721ReceivedCall } from "./Validatednft_OnErc721ReceivedCall";
import { Validatednft_PauseCall } from "./Validatednft_PauseCall";
import { Validatednft_RenounceOwnershipCall } from "./Validatednft_RenounceOwnershipCall";
import { Validatednft_SafeTransferFrom1call } from "./Validatednft_SafeTransferFrom1call";
import { Validatednft_SafeTransferFrom2call } from "./Validatednft_SafeTransferFrom2call";
import { Validatednft_SetApprovalForAllCall } from "./Validatednft_SetApprovalForAllCall";
import { Validatednft_SetRoyaltiesForValidatorCall } from "./Validatednft_SetRoyaltiesForValidatorCall";
import { Validatednft_TransferFromCall } from "./Validatednft_TransferFromCall";
import { Validatednft_TransferOwnershipCall } from "./Validatednft_TransferOwnershipCall";
import { Validatednft_UnpauseCall } from "./Validatednft_UnpauseCall";
import { Validatednft_UpgradeToCall } from "./Validatednft_UpgradeToCall";
import { Validatednft_UpgradeToAndCallCall } from "./Validatednft_UpgradeToAndCallCall";

export class Calls {
  static encode(message: Calls, writer: Writer): void {
    const acofeeCallRenounceOwnerships = message.acofeeCallRenounceOwnerships;
    for (let i: i32 = 0; i < acofeeCallRenounceOwnerships.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Acofee_RenounceOwnershipCall.encode(
        acofeeCallRenounceOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeCallSetAconomyNftLendBorrowFees =
      message.acofeeCallSetAconomyNftLendBorrowFees;
    for (
      let i: i32 = 0;
      i < acofeeCallSetAconomyNftLendBorrowFees.length;
      ++i
    ) {
      writer.uint32(18);
      writer.fork();
      Acofee_SetAconomyNftLendBorrowFeeCall.encode(
        acofeeCallSetAconomyNftLendBorrowFees[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeCallSetAconomyPiMarketFees =
      message.acofeeCallSetAconomyPiMarketFees;
    for (let i: i32 = 0; i < acofeeCallSetAconomyPiMarketFees.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Acofee_SetAconomyPiMarketFeeCall.encode(
        acofeeCallSetAconomyPiMarketFees[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeCallSetAconomyPoolFees = message.acofeeCallSetAconomyPoolFees;
    for (let i: i32 = 0; i < acofeeCallSetAconomyPoolFees.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Acofee_SetAconomyPoolFeeCall.encode(
        acofeeCallSetAconomyPoolFees[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeCallTransferOwnerships = message.acofeeCallTransferOwnerships;
    for (let i: i32 = 0; i < acofeeCallTransferOwnerships.length; ++i) {
      writer.uint32(42);
      writer.fork();
      Acofee_TransferOwnershipCall.encode(
        acofeeCallTransferOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallAddTrustedForwarders = message.pinftCallAddTrustedForwarders;
    for (let i: i32 = 0; i < pinftCallAddTrustedForwarders.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Pinft_AddTrustedForwarderCall.encode(
        pinftCallAddTrustedForwarders[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallApproves = message.pinftCallApproves;
    for (let i: i32 = 0; i < pinftCallApproves.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Pinft_ApproveCall.encode(pinftCallApproves[i], writer);
      writer.ldelim();
    }

    const pinftCallDeleteNfts = message.pinftCallDeleteNfts;
    for (let i: i32 = 0; i < pinftCallDeleteNfts.length; ++i) {
      writer.uint32(66);
      writer.fork();
      Pinft_DeleteNftCall.encode(pinftCallDeleteNfts[i], writer);
      writer.ldelim();
    }

    const pinftCallDeleteValidatorRoyalties =
      message.pinftCallDeleteValidatorRoyalties;
    for (let i: i32 = 0; i < pinftCallDeleteValidatorRoyalties.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Pinft_DeleteValidatorRoyaltiesCall.encode(
        pinftCallDeleteValidatorRoyalties[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallInitializes = message.pinftCallInitializes;
    for (let i: i32 = 0; i < pinftCallInitializes.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Pinft_InitializeCall.encode(pinftCallInitializes[i], writer);
      writer.ldelim();
    }

    const pinftCallLazyMintNfts = message.pinftCallLazyMintNfts;
    for (let i: i32 = 0; i < pinftCallLazyMintNfts.length; ++i) {
      writer.uint32(90);
      writer.fork();
      Pinft_LazyMintNftCall.encode(pinftCallLazyMintNfts[i], writer);
      writer.ldelim();
    }

    const pinftCallMintNfts = message.pinftCallMintNfts;
    for (let i: i32 = 0; i < pinftCallMintNfts.length; ++i) {
      writer.uint32(98);
      writer.fork();
      Pinft_MintNftCall.encode(pinftCallMintNfts[i], writer);
      writer.ldelim();
    }

    const pinftCallPauses = message.pinftCallPauses;
    for (let i: i32 = 0; i < pinftCallPauses.length; ++i) {
      writer.uint32(106);
      writer.fork();
      Pinft_PauseCall.encode(pinftCallPauses[i], writer);
      writer.ldelim();
    }

    const pinftCallRemoveTrustedForwarders =
      message.pinftCallRemoveTrustedForwarders;
    for (let i: i32 = 0; i < pinftCallRemoveTrustedForwarders.length; ++i) {
      writer.uint32(114);
      writer.fork();
      Pinft_RemoveTrustedForwarderCall.encode(
        pinftCallRemoveTrustedForwarders[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallRenounceOwnerships = message.pinftCallRenounceOwnerships;
    for (let i: i32 = 0; i < pinftCallRenounceOwnerships.length; ++i) {
      writer.uint32(122);
      writer.fork();
      Pinft_RenounceOwnershipCall.encode(
        pinftCallRenounceOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallSafeTransferFrom1s = message.pinftCallSafeTransferFrom1s;
    for (let i: i32 = 0; i < pinftCallSafeTransferFrom1s.length; ++i) {
      writer.uint32(130);
      writer.fork();
      Pinft_SafeTransferFrom1call.encode(
        pinftCallSafeTransferFrom1s[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallSafeTransferFrom2s = message.pinftCallSafeTransferFrom2s;
    for (let i: i32 = 0; i < pinftCallSafeTransferFrom2s.length; ++i) {
      writer.uint32(138);
      writer.fork();
      Pinft_SafeTransferFrom2call.encode(
        pinftCallSafeTransferFrom2s[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallSetApprovalForAlls = message.pinftCallSetApprovalForAlls;
    for (let i: i32 = 0; i < pinftCallSetApprovalForAlls.length; ++i) {
      writer.uint32(146);
      writer.fork();
      Pinft_SetApprovalForAllCall.encode(
        pinftCallSetApprovalForAlls[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallSetRoyaltiesForValidators =
      message.pinftCallSetRoyaltiesForValidators;
    for (let i: i32 = 0; i < pinftCallSetRoyaltiesForValidators.length; ++i) {
      writer.uint32(154);
      writer.fork();
      Pinft_SetRoyaltiesForValidatorCall.encode(
        pinftCallSetRoyaltiesForValidators[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallTransferFroms = message.pinftCallTransferFroms;
    for (let i: i32 = 0; i < pinftCallTransferFroms.length; ++i) {
      writer.uint32(162);
      writer.fork();
      Pinft_TransferFromCall.encode(pinftCallTransferFroms[i], writer);
      writer.ldelim();
    }

    const pinftCallTransferOwnerships = message.pinftCallTransferOwnerships;
    for (let i: i32 = 0; i < pinftCallTransferOwnerships.length; ++i) {
      writer.uint32(170);
      writer.fork();
      Pinft_TransferOwnershipCall.encode(
        pinftCallTransferOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pinftCallUnpauses = message.pinftCallUnpauses;
    for (let i: i32 = 0; i < pinftCallUnpauses.length; ++i) {
      writer.uint32(178);
      writer.fork();
      Pinft_UnpauseCall.encode(pinftCallUnpauses[i], writer);
      writer.ldelim();
    }

    const pinftCallUpgradeTos = message.pinftCallUpgradeTos;
    for (let i: i32 = 0; i < pinftCallUpgradeTos.length; ++i) {
      writer.uint32(186);
      writer.fork();
      Pinft_UpgradeToCall.encode(pinftCallUpgradeTos[i], writer);
      writer.ldelim();
    }

    const pinftCallUpgradeToAndCalls = message.pinftCallUpgradeToAndCalls;
    for (let i: i32 = 0; i < pinftCallUpgradeToAndCalls.length; ++i) {
      writer.uint32(194);
      writer.fork();
      Pinft_UpgradeToAndCallCall.encode(pinftCallUpgradeToAndCalls[i], writer);
      writer.ldelim();
    }

    const pimethCallRepays = message.pimethCallRepays;
    for (let i: i32 = 0; i < pimethCallRepays.length; ++i) {
      writer.uint32(202);
      writer.fork();
      Pimeth_RepayCall.encode(pimethCallRepays[i], writer);
      writer.ldelim();
    }

    const pimethCallAddErc20s = message.pimethCallAddErc20s;
    for (let i: i32 = 0; i < pimethCallAddErc20s.length; ++i) {
      writer.uint32(210);
      writer.fork();
      Pimeth_AddErc20call.encode(pimethCallAddErc20s[i], writer);
      writer.ldelim();
    }

    const pimethCallAddTrustedForwarders =
      message.pimethCallAddTrustedForwarders;
    for (let i: i32 = 0; i < pimethCallAddTrustedForwarders.length; ++i) {
      writer.uint32(218);
      writer.fork();
      Pimeth_AddTrustedForwarderCall.encode(
        pimethCallAddTrustedForwarders[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallAddValidators = message.pimethCallAddValidators;
    for (let i: i32 = 0; i < pimethCallAddValidators.length; ++i) {
      writer.uint32(226);
      writer.fork();
      Pimeth_AddValidatorCall.encode(pimethCallAddValidators[i], writer);
      writer.ldelim();
    }

    const pimethCallInitializes = message.pimethCallInitializes;
    for (let i: i32 = 0; i < pimethCallInitializes.length; ++i) {
      writer.uint32(234);
      writer.fork();
      Pimeth_InitializeCall.encode(pimethCallInitializes[i], writer);
      writer.ldelim();
    }

    const pimethCallLazyAddValidators = message.pimethCallLazyAddValidators;
    for (let i: i32 = 0; i < pimethCallLazyAddValidators.length; ++i) {
      writer.uint32(242);
      writer.fork();
      Pimeth_LazyAddValidatorCall.encode(
        pimethCallLazyAddValidators[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallOnErc721Receiveds = message.pimethCallOnErc721Receiveds;
    for (let i: i32 = 0; i < pimethCallOnErc721Receiveds.length; ++i) {
      writer.uint32(250);
      writer.fork();
      Pimeth_OnErc721ReceivedCall.encode(
        pimethCallOnErc721Receiveds[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallPaidCommissions = message.pimethCallPaidCommissions;
    for (let i: i32 = 0; i < pimethCallPaidCommissions.length; ++i) {
      writer.uint32(258);
      writer.fork();
      Pimeth_PaidCommissionCall.encode(pimethCallPaidCommissions[i], writer);
      writer.ldelim();
    }

    const pimethCallPauses = message.pimethCallPauses;
    for (let i: i32 = 0; i < pimethCallPauses.length; ++i) {
      writer.uint32(266);
      writer.fork();
      Pimeth_PauseCall.encode(pimethCallPauses[i], writer);
      writer.ldelim();
    }

    const pimethCallRedeemOrBurnPiNfts = message.pimethCallRedeemOrBurnPiNfts;
    for (let i: i32 = 0; i < pimethCallRedeemOrBurnPiNfts.length; ++i) {
      writer.uint32(274);
      writer.fork();
      Pimeth_RedeemOrBurnPiNftCall.encode(
        pimethCallRedeemOrBurnPiNfts[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallRemoveTrustedForwarders =
      message.pimethCallRemoveTrustedForwarders;
    for (let i: i32 = 0; i < pimethCallRemoveTrustedForwarders.length; ++i) {
      writer.uint32(282);
      writer.fork();
      Pimeth_RemoveTrustedForwarderCall.encode(
        pimethCallRemoveTrustedForwarders[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallRenounceOwnerships = message.pimethCallRenounceOwnerships;
    for (let i: i32 = 0; i < pimethCallRenounceOwnerships.length; ++i) {
      writer.uint32(290);
      writer.fork();
      Pimeth_RenounceOwnershipCall.encode(
        pimethCallRenounceOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallSetPiMarkets = message.pimethCallSetPiMarkets;
    for (let i: i32 = 0; i < pimethCallSetPiMarkets.length; ++i) {
      writer.uint32(298);
      writer.fork();
      Pimeth_SetPiMarketCall.encode(pimethCallSetPiMarkets[i], writer);
      writer.ldelim();
    }

    const pimethCallTransferOwnerships = message.pimethCallTransferOwnerships;
    for (let i: i32 = 0; i < pimethCallTransferOwnerships.length; ++i) {
      writer.uint32(306);
      writer.fork();
      Pimeth_TransferOwnershipCall.encode(
        pimethCallTransferOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallUnpauses = message.pimethCallUnpauses;
    for (let i: i32 = 0; i < pimethCallUnpauses.length; ++i) {
      writer.uint32(314);
      writer.fork();
      Pimeth_UnpauseCall.encode(pimethCallUnpauses[i], writer);
      writer.ldelim();
    }

    const pimethCallUpgradeTos = message.pimethCallUpgradeTos;
    for (let i: i32 = 0; i < pimethCallUpgradeTos.length; ++i) {
      writer.uint32(322);
      writer.fork();
      Pimeth_UpgradeToCall.encode(pimethCallUpgradeTos[i], writer);
      writer.ldelim();
    }

    const pimethCallUpgradeToAndCalls = message.pimethCallUpgradeToAndCalls;
    for (let i: i32 = 0; i < pimethCallUpgradeToAndCalls.length; ++i) {
      writer.uint32(330);
      writer.fork();
      Pimeth_UpgradeToAndCallCall.encode(
        pimethCallUpgradeToAndCalls[i],
        writer
      );
      writer.ldelim();
    }

    const pimethCallWithdraws = message.pimethCallWithdraws;
    for (let i: i32 = 0; i < pimethCallWithdraws.length; ++i) {
      writer.uint32(338);
      writer.fork();
      Pimeth_WithdrawCall.encode(pimethCallWithdraws[i], writer);
      writer.ldelim();
    }

    const pimarkCallBids = message.pimarkCallBids;
    for (let i: i32 = 0; i < pimarkCallBids.length; ++i) {
      writer.uint32(346);
      writer.fork();
      Pimark_BidCall.encode(pimarkCallBids[i], writer);
      writer.ldelim();
    }

    const pimarkCallBuyNfts = message.pimarkCallBuyNfts;
    for (let i: i32 = 0; i < pimarkCallBuyNfts.length; ++i) {
      writer.uint32(354);
      writer.fork();
      Pimark_BuyNftCall.encode(pimarkCallBuyNfts[i], writer);
      writer.ldelim();
    }

    const pimarkCallSellNftByBids = message.pimarkCallSellNftByBids;
    for (let i: i32 = 0; i < pimarkCallSellNftByBids.length; ++i) {
      writer.uint32(362);
      writer.fork();
      Pimark_SellNftByBidCall.encode(pimarkCallSellNftByBids[i], writer);
      writer.ldelim();
    }

    const pimarkCallAcceptSwapRequests = message.pimarkCallAcceptSwapRequests;
    for (let i: i32 = 0; i < pimarkCallAcceptSwapRequests.length; ++i) {
      writer.uint32(370);
      writer.fork();
      Pimark_AcceptSwapRequestCall.encode(
        pimarkCallAcceptSwapRequests[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkCallCancelSales = message.pimarkCallCancelSales;
    for (let i: i32 = 0; i < pimarkCallCancelSales.length; ++i) {
      writer.uint32(378);
      writer.fork();
      Pimark_CancelSaleCall.encode(pimarkCallCancelSales[i], writer);
      writer.ldelim();
    }

    const pimarkCallCancelSwaps = message.pimarkCallCancelSwaps;
    for (let i: i32 = 0; i < pimarkCallCancelSwaps.length; ++i) {
      writer.uint32(386);
      writer.fork();
      Pimark_CancelSwapCall.encode(pimarkCallCancelSwaps[i], writer);
      writer.ldelim();
    }

    const pimarkCallEditSalePrices = message.pimarkCallEditSalePrices;
    for (let i: i32 = 0; i < pimarkCallEditSalePrices.length; ++i) {
      writer.uint32(394);
      writer.fork();
      Pimark_EditSalePriceCall.encode(pimarkCallEditSalePrices[i], writer);
      writer.ldelim();
    }

    const pimarkCallExecuteBidOrders = message.pimarkCallExecuteBidOrders;
    for (let i: i32 = 0; i < pimarkCallExecuteBidOrders.length; ++i) {
      writer.uint32(402);
      writer.fork();
      Pimark_ExecuteBidOrderCall.encode(pimarkCallExecuteBidOrders[i], writer);
      writer.ldelim();
    }

    const pimarkCallInitializes = message.pimarkCallInitializes;
    for (let i: i32 = 0; i < pimarkCallInitializes.length; ++i) {
      writer.uint32(410);
      writer.fork();
      Pimark_InitializeCall.encode(pimarkCallInitializes[i], writer);
      writer.ldelim();
    }

    const pimarkCallMakeSwapRequests = message.pimarkCallMakeSwapRequests;
    for (let i: i32 = 0; i < pimarkCallMakeSwapRequests.length; ++i) {
      writer.uint32(418);
      writer.fork();
      Pimark_MakeSwapRequestCall.encode(pimarkCallMakeSwapRequests[i], writer);
      writer.ldelim();
    }

    const pimarkCallOnErc721Receiveds = message.pimarkCallOnErc721Receiveds;
    for (let i: i32 = 0; i < pimarkCallOnErc721Receiveds.length; ++i) {
      writer.uint32(426);
      writer.fork();
      Pimark_OnErc721ReceivedCall.encode(
        pimarkCallOnErc721Receiveds[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkCallPauses = message.pimarkCallPauses;
    for (let i: i32 = 0; i < pimarkCallPauses.length; ++i) {
      writer.uint32(434);
      writer.fork();
      Pimark_PauseCall.encode(pimarkCallPauses[i], writer);
      writer.ldelim();
    }

    const pimarkCallRenounceOwnerships = message.pimarkCallRenounceOwnerships;
    for (let i: i32 = 0; i < pimarkCallRenounceOwnerships.length; ++i) {
      writer.uint32(442);
      writer.fork();
      Pimark_RenounceOwnershipCall.encode(
        pimarkCallRenounceOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkCallSellNfts = message.pimarkCallSellNfts;
    for (let i: i32 = 0; i < pimarkCallSellNfts.length; ++i) {
      writer.uint32(450);
      writer.fork();
      Pimark_SellNftCall.encode(pimarkCallSellNfts[i], writer);
      writer.ldelim();
    }

    const pimarkCallTransferOwnerships = message.pimarkCallTransferOwnerships;
    for (let i: i32 = 0; i < pimarkCallTransferOwnerships.length; ++i) {
      writer.uint32(458);
      writer.fork();
      Pimark_TransferOwnershipCall.encode(
        pimarkCallTransferOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkCallUnpauses = message.pimarkCallUnpauses;
    for (let i: i32 = 0; i < pimarkCallUnpauses.length; ++i) {
      writer.uint32(466);
      writer.fork();
      Pimark_UnpauseCall.encode(pimarkCallUnpauses[i], writer);
      writer.ldelim();
    }

    const pimarkCallUpgradeTos = message.pimarkCallUpgradeTos;
    for (let i: i32 = 0; i < pimarkCallUpgradeTos.length; ++i) {
      writer.uint32(474);
      writer.fork();
      Pimark_UpgradeToCall.encode(pimarkCallUpgradeTos[i], writer);
      writer.ldelim();
    }

    const pimarkCallUpgradeToAndCalls = message.pimarkCallUpgradeToAndCalls;
    for (let i: i32 = 0; i < pimarkCallUpgradeToAndCalls.length; ++i) {
      writer.uint32(482);
      writer.fork();
      Pimark_UpgradeToAndCallCall.encode(
        pimarkCallUpgradeToAndCalls[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkCallWithdrawBidMonies = message.pimarkCallWithdrawBidMonies;
    for (let i: i32 = 0; i < pimarkCallWithdrawBidMonies.length; ++i) {
      writer.uint32(490);
      writer.fork();
      Pimark_WithdrawBidMoneyCall.encode(
        pimarkCallWithdrawBidMonies[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallApproves = message.validatednftCallApproves;
    for (let i: i32 = 0; i < validatednftCallApproves.length; ++i) {
      writer.uint32(498);
      writer.fork();
      Validatednft_ApproveCall.encode(validatednftCallApproves[i], writer);
      writer.ldelim();
    }

    const validatednftCallDeleteNfts = message.validatednftCallDeleteNfts;
    for (let i: i32 = 0; i < validatednftCallDeleteNfts.length; ++i) {
      writer.uint32(506);
      writer.fork();
      Validatednft_DeleteNftCall.encode(validatednftCallDeleteNfts[i], writer);
      writer.ldelim();
    }

    const validatednftCallDeleteValidatorRoyalties =
      message.validatednftCallDeleteValidatorRoyalties;
    for (
      let i: i32 = 0;
      i < validatednftCallDeleteValidatorRoyalties.length;
      ++i
    ) {
      writer.uint32(514);
      writer.fork();
      Validatednft_DeleteValidatorRoyaltiesCall.encode(
        validatednftCallDeleteValidatorRoyalties[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallInitializes = message.validatednftCallInitializes;
    for (let i: i32 = 0; i < validatednftCallInitializes.length; ++i) {
      writer.uint32(522);
      writer.fork();
      Validatednft_InitializeCall.encode(
        validatednftCallInitializes[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallMintValidatedNfts =
      message.validatednftCallMintValidatedNfts;
    for (let i: i32 = 0; i < validatednftCallMintValidatedNfts.length; ++i) {
      writer.uint32(530);
      writer.fork();
      Validatednft_MintValidatedNftCall.encode(
        validatednftCallMintValidatedNfts[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallOnErc721Receiveds =
      message.validatednftCallOnErc721Receiveds;
    for (let i: i32 = 0; i < validatednftCallOnErc721Receiveds.length; ++i) {
      writer.uint32(538);
      writer.fork();
      Validatednft_OnErc721ReceivedCall.encode(
        validatednftCallOnErc721Receiveds[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallPauses = message.validatednftCallPauses;
    for (let i: i32 = 0; i < validatednftCallPauses.length; ++i) {
      writer.uint32(546);
      writer.fork();
      Validatednft_PauseCall.encode(validatednftCallPauses[i], writer);
      writer.ldelim();
    }

    const validatednftCallRenounceOwnerships =
      message.validatednftCallRenounceOwnerships;
    for (let i: i32 = 0; i < validatednftCallRenounceOwnerships.length; ++i) {
      writer.uint32(554);
      writer.fork();
      Validatednft_RenounceOwnershipCall.encode(
        validatednftCallRenounceOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallSafeTransferFrom1s =
      message.validatednftCallSafeTransferFrom1s;
    for (let i: i32 = 0; i < validatednftCallSafeTransferFrom1s.length; ++i) {
      writer.uint32(562);
      writer.fork();
      Validatednft_SafeTransferFrom1call.encode(
        validatednftCallSafeTransferFrom1s[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallSafeTransferFrom2s =
      message.validatednftCallSafeTransferFrom2s;
    for (let i: i32 = 0; i < validatednftCallSafeTransferFrom2s.length; ++i) {
      writer.uint32(570);
      writer.fork();
      Validatednft_SafeTransferFrom2call.encode(
        validatednftCallSafeTransferFrom2s[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallSetApprovalForAlls =
      message.validatednftCallSetApprovalForAlls;
    for (let i: i32 = 0; i < validatednftCallSetApprovalForAlls.length; ++i) {
      writer.uint32(578);
      writer.fork();
      Validatednft_SetApprovalForAllCall.encode(
        validatednftCallSetApprovalForAlls[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallSetRoyaltiesForValidators =
      message.validatednftCallSetRoyaltiesForValidators;
    for (
      let i: i32 = 0;
      i < validatednftCallSetRoyaltiesForValidators.length;
      ++i
    ) {
      writer.uint32(586);
      writer.fork();
      Validatednft_SetRoyaltiesForValidatorCall.encode(
        validatednftCallSetRoyaltiesForValidators[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallTransferFroms = message.validatednftCallTransferFroms;
    for (let i: i32 = 0; i < validatednftCallTransferFroms.length; ++i) {
      writer.uint32(594);
      writer.fork();
      Validatednft_TransferFromCall.encode(
        validatednftCallTransferFroms[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallTransferOwnerships =
      message.validatednftCallTransferOwnerships;
    for (let i: i32 = 0; i < validatednftCallTransferOwnerships.length; ++i) {
      writer.uint32(602);
      writer.fork();
      Validatednft_TransferOwnershipCall.encode(
        validatednftCallTransferOwnerships[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftCallUnpauses = message.validatednftCallUnpauses;
    for (let i: i32 = 0; i < validatednftCallUnpauses.length; ++i) {
      writer.uint32(610);
      writer.fork();
      Validatednft_UnpauseCall.encode(validatednftCallUnpauses[i], writer);
      writer.ldelim();
    }

    const validatednftCallUpgradeTos = message.validatednftCallUpgradeTos;
    for (let i: i32 = 0; i < validatednftCallUpgradeTos.length; ++i) {
      writer.uint32(618);
      writer.fork();
      Validatednft_UpgradeToCall.encode(validatednftCallUpgradeTos[i], writer);
      writer.ldelim();
    }

    const validatednftCallUpgradeToAndCalls =
      message.validatednftCallUpgradeToAndCalls;
    for (let i: i32 = 0; i < validatednftCallUpgradeToAndCalls.length; ++i) {
      writer.uint32(626);
      writer.fork();
      Validatednft_UpgradeToAndCallCall.encode(
        validatednftCallUpgradeToAndCalls[i],
        writer
      );
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Calls {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Calls();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.acofeeCallRenounceOwnerships.push(
            Acofee_RenounceOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.acofeeCallSetAconomyNftLendBorrowFees.push(
            Acofee_SetAconomyNftLendBorrowFeeCall.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 3:
          message.acofeeCallSetAconomyPiMarketFees.push(
            Acofee_SetAconomyPiMarketFeeCall.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.acofeeCallSetAconomyPoolFees.push(
            Acofee_SetAconomyPoolFeeCall.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.acofeeCallTransferOwnerships.push(
            Acofee_TransferOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.pinftCallAddTrustedForwarders.push(
            Pinft_AddTrustedForwarderCall.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.pinftCallApproves.push(
            Pinft_ApproveCall.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.pinftCallDeleteNfts.push(
            Pinft_DeleteNftCall.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.pinftCallDeleteValidatorRoyalties.push(
            Pinft_DeleteValidatorRoyaltiesCall.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.pinftCallInitializes.push(
            Pinft_InitializeCall.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.pinftCallLazyMintNfts.push(
            Pinft_LazyMintNftCall.decode(reader, reader.uint32())
          );
          break;

        case 12:
          message.pinftCallMintNfts.push(
            Pinft_MintNftCall.decode(reader, reader.uint32())
          );
          break;

        case 13:
          message.pinftCallPauses.push(
            Pinft_PauseCall.decode(reader, reader.uint32())
          );
          break;

        case 14:
          message.pinftCallRemoveTrustedForwarders.push(
            Pinft_RemoveTrustedForwarderCall.decode(reader, reader.uint32())
          );
          break;

        case 15:
          message.pinftCallRenounceOwnerships.push(
            Pinft_RenounceOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 16:
          message.pinftCallSafeTransferFrom1s.push(
            Pinft_SafeTransferFrom1call.decode(reader, reader.uint32())
          );
          break;

        case 17:
          message.pinftCallSafeTransferFrom2s.push(
            Pinft_SafeTransferFrom2call.decode(reader, reader.uint32())
          );
          break;

        case 18:
          message.pinftCallSetApprovalForAlls.push(
            Pinft_SetApprovalForAllCall.decode(reader, reader.uint32())
          );
          break;

        case 19:
          message.pinftCallSetRoyaltiesForValidators.push(
            Pinft_SetRoyaltiesForValidatorCall.decode(reader, reader.uint32())
          );
          break;

        case 20:
          message.pinftCallTransferFroms.push(
            Pinft_TransferFromCall.decode(reader, reader.uint32())
          );
          break;

        case 21:
          message.pinftCallTransferOwnerships.push(
            Pinft_TransferOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 22:
          message.pinftCallUnpauses.push(
            Pinft_UnpauseCall.decode(reader, reader.uint32())
          );
          break;

        case 23:
          message.pinftCallUpgradeTos.push(
            Pinft_UpgradeToCall.decode(reader, reader.uint32())
          );
          break;

        case 24:
          message.pinftCallUpgradeToAndCalls.push(
            Pinft_UpgradeToAndCallCall.decode(reader, reader.uint32())
          );
          break;

        case 25:
          message.pimethCallRepays.push(
            Pimeth_RepayCall.decode(reader, reader.uint32())
          );
          break;

        case 26:
          message.pimethCallAddErc20s.push(
            Pimeth_AddErc20call.decode(reader, reader.uint32())
          );
          break;

        case 27:
          message.pimethCallAddTrustedForwarders.push(
            Pimeth_AddTrustedForwarderCall.decode(reader, reader.uint32())
          );
          break;

        case 28:
          message.pimethCallAddValidators.push(
            Pimeth_AddValidatorCall.decode(reader, reader.uint32())
          );
          break;

        case 29:
          message.pimethCallInitializes.push(
            Pimeth_InitializeCall.decode(reader, reader.uint32())
          );
          break;

        case 30:
          message.pimethCallLazyAddValidators.push(
            Pimeth_LazyAddValidatorCall.decode(reader, reader.uint32())
          );
          break;

        case 31:
          message.pimethCallOnErc721Receiveds.push(
            Pimeth_OnErc721ReceivedCall.decode(reader, reader.uint32())
          );
          break;

        case 32:
          message.pimethCallPaidCommissions.push(
            Pimeth_PaidCommissionCall.decode(reader, reader.uint32())
          );
          break;

        case 33:
          message.pimethCallPauses.push(
            Pimeth_PauseCall.decode(reader, reader.uint32())
          );
          break;

        case 34:
          message.pimethCallRedeemOrBurnPiNfts.push(
            Pimeth_RedeemOrBurnPiNftCall.decode(reader, reader.uint32())
          );
          break;

        case 35:
          message.pimethCallRemoveTrustedForwarders.push(
            Pimeth_RemoveTrustedForwarderCall.decode(reader, reader.uint32())
          );
          break;

        case 36:
          message.pimethCallRenounceOwnerships.push(
            Pimeth_RenounceOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 37:
          message.pimethCallSetPiMarkets.push(
            Pimeth_SetPiMarketCall.decode(reader, reader.uint32())
          );
          break;

        case 38:
          message.pimethCallTransferOwnerships.push(
            Pimeth_TransferOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 39:
          message.pimethCallUnpauses.push(
            Pimeth_UnpauseCall.decode(reader, reader.uint32())
          );
          break;

        case 40:
          message.pimethCallUpgradeTos.push(
            Pimeth_UpgradeToCall.decode(reader, reader.uint32())
          );
          break;

        case 41:
          message.pimethCallUpgradeToAndCalls.push(
            Pimeth_UpgradeToAndCallCall.decode(reader, reader.uint32())
          );
          break;

        case 42:
          message.pimethCallWithdraws.push(
            Pimeth_WithdrawCall.decode(reader, reader.uint32())
          );
          break;

        case 43:
          message.pimarkCallBids.push(
            Pimark_BidCall.decode(reader, reader.uint32())
          );
          break;

        case 44:
          message.pimarkCallBuyNfts.push(
            Pimark_BuyNftCall.decode(reader, reader.uint32())
          );
          break;

        case 45:
          message.pimarkCallSellNftByBids.push(
            Pimark_SellNftByBidCall.decode(reader, reader.uint32())
          );
          break;

        case 46:
          message.pimarkCallAcceptSwapRequests.push(
            Pimark_AcceptSwapRequestCall.decode(reader, reader.uint32())
          );
          break;

        case 47:
          message.pimarkCallCancelSales.push(
            Pimark_CancelSaleCall.decode(reader, reader.uint32())
          );
          break;

        case 48:
          message.pimarkCallCancelSwaps.push(
            Pimark_CancelSwapCall.decode(reader, reader.uint32())
          );
          break;

        case 49:
          message.pimarkCallEditSalePrices.push(
            Pimark_EditSalePriceCall.decode(reader, reader.uint32())
          );
          break;

        case 50:
          message.pimarkCallExecuteBidOrders.push(
            Pimark_ExecuteBidOrderCall.decode(reader, reader.uint32())
          );
          break;

        case 51:
          message.pimarkCallInitializes.push(
            Pimark_InitializeCall.decode(reader, reader.uint32())
          );
          break;

        case 52:
          message.pimarkCallMakeSwapRequests.push(
            Pimark_MakeSwapRequestCall.decode(reader, reader.uint32())
          );
          break;

        case 53:
          message.pimarkCallOnErc721Receiveds.push(
            Pimark_OnErc721ReceivedCall.decode(reader, reader.uint32())
          );
          break;

        case 54:
          message.pimarkCallPauses.push(
            Pimark_PauseCall.decode(reader, reader.uint32())
          );
          break;

        case 55:
          message.pimarkCallRenounceOwnerships.push(
            Pimark_RenounceOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 56:
          message.pimarkCallSellNfts.push(
            Pimark_SellNftCall.decode(reader, reader.uint32())
          );
          break;

        case 57:
          message.pimarkCallTransferOwnerships.push(
            Pimark_TransferOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 58:
          message.pimarkCallUnpauses.push(
            Pimark_UnpauseCall.decode(reader, reader.uint32())
          );
          break;

        case 59:
          message.pimarkCallUpgradeTos.push(
            Pimark_UpgradeToCall.decode(reader, reader.uint32())
          );
          break;

        case 60:
          message.pimarkCallUpgradeToAndCalls.push(
            Pimark_UpgradeToAndCallCall.decode(reader, reader.uint32())
          );
          break;

        case 61:
          message.pimarkCallWithdrawBidMonies.push(
            Pimark_WithdrawBidMoneyCall.decode(reader, reader.uint32())
          );
          break;

        case 62:
          message.validatednftCallApproves.push(
            Validatednft_ApproveCall.decode(reader, reader.uint32())
          );
          break;

        case 63:
          message.validatednftCallDeleteNfts.push(
            Validatednft_DeleteNftCall.decode(reader, reader.uint32())
          );
          break;

        case 64:
          message.validatednftCallDeleteValidatorRoyalties.push(
            Validatednft_DeleteValidatorRoyaltiesCall.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 65:
          message.validatednftCallInitializes.push(
            Validatednft_InitializeCall.decode(reader, reader.uint32())
          );
          break;

        case 66:
          message.validatednftCallMintValidatedNfts.push(
            Validatednft_MintValidatedNftCall.decode(reader, reader.uint32())
          );
          break;

        case 67:
          message.validatednftCallOnErc721Receiveds.push(
            Validatednft_OnErc721ReceivedCall.decode(reader, reader.uint32())
          );
          break;

        case 68:
          message.validatednftCallPauses.push(
            Validatednft_PauseCall.decode(reader, reader.uint32())
          );
          break;

        case 69:
          message.validatednftCallRenounceOwnerships.push(
            Validatednft_RenounceOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 70:
          message.validatednftCallSafeTransferFrom1s.push(
            Validatednft_SafeTransferFrom1call.decode(reader, reader.uint32())
          );
          break;

        case 71:
          message.validatednftCallSafeTransferFrom2s.push(
            Validatednft_SafeTransferFrom2call.decode(reader, reader.uint32())
          );
          break;

        case 72:
          message.validatednftCallSetApprovalForAlls.push(
            Validatednft_SetApprovalForAllCall.decode(reader, reader.uint32())
          );
          break;

        case 73:
          message.validatednftCallSetRoyaltiesForValidators.push(
            Validatednft_SetRoyaltiesForValidatorCall.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 74:
          message.validatednftCallTransferFroms.push(
            Validatednft_TransferFromCall.decode(reader, reader.uint32())
          );
          break;

        case 75:
          message.validatednftCallTransferOwnerships.push(
            Validatednft_TransferOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 76:
          message.validatednftCallUnpauses.push(
            Validatednft_UnpauseCall.decode(reader, reader.uint32())
          );
          break;

        case 77:
          message.validatednftCallUpgradeTos.push(
            Validatednft_UpgradeToCall.decode(reader, reader.uint32())
          );
          break;

        case 78:
          message.validatednftCallUpgradeToAndCalls.push(
            Validatednft_UpgradeToAndCallCall.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  acofeeCallRenounceOwnerships: Array<Acofee_RenounceOwnershipCall>;
  acofeeCallSetAconomyNftLendBorrowFees: Array<Acofee_SetAconomyNftLendBorrowFeeCall>;
  acofeeCallSetAconomyPiMarketFees: Array<Acofee_SetAconomyPiMarketFeeCall>;
  acofeeCallSetAconomyPoolFees: Array<Acofee_SetAconomyPoolFeeCall>;
  acofeeCallTransferOwnerships: Array<Acofee_TransferOwnershipCall>;
  pinftCallAddTrustedForwarders: Array<Pinft_AddTrustedForwarderCall>;
  pinftCallApproves: Array<Pinft_ApproveCall>;
  pinftCallDeleteNfts: Array<Pinft_DeleteNftCall>;
  pinftCallDeleteValidatorRoyalties: Array<Pinft_DeleteValidatorRoyaltiesCall>;
  pinftCallInitializes: Array<Pinft_InitializeCall>;
  pinftCallLazyMintNfts: Array<Pinft_LazyMintNftCall>;
  pinftCallMintNfts: Array<Pinft_MintNftCall>;
  pinftCallPauses: Array<Pinft_PauseCall>;
  pinftCallRemoveTrustedForwarders: Array<Pinft_RemoveTrustedForwarderCall>;
  pinftCallRenounceOwnerships: Array<Pinft_RenounceOwnershipCall>;
  pinftCallSafeTransferFrom1s: Array<Pinft_SafeTransferFrom1call>;
  pinftCallSafeTransferFrom2s: Array<Pinft_SafeTransferFrom2call>;
  pinftCallSetApprovalForAlls: Array<Pinft_SetApprovalForAllCall>;
  pinftCallSetRoyaltiesForValidators: Array<Pinft_SetRoyaltiesForValidatorCall>;
  pinftCallTransferFroms: Array<Pinft_TransferFromCall>;
  pinftCallTransferOwnerships: Array<Pinft_TransferOwnershipCall>;
  pinftCallUnpauses: Array<Pinft_UnpauseCall>;
  pinftCallUpgradeTos: Array<Pinft_UpgradeToCall>;
  pinftCallUpgradeToAndCalls: Array<Pinft_UpgradeToAndCallCall>;
  pimethCallRepays: Array<Pimeth_RepayCall>;
  pimethCallAddErc20s: Array<Pimeth_AddErc20call>;
  pimethCallAddTrustedForwarders: Array<Pimeth_AddTrustedForwarderCall>;
  pimethCallAddValidators: Array<Pimeth_AddValidatorCall>;
  pimethCallInitializes: Array<Pimeth_InitializeCall>;
  pimethCallLazyAddValidators: Array<Pimeth_LazyAddValidatorCall>;
  pimethCallOnErc721Receiveds: Array<Pimeth_OnErc721ReceivedCall>;
  pimethCallPaidCommissions: Array<Pimeth_PaidCommissionCall>;
  pimethCallPauses: Array<Pimeth_PauseCall>;
  pimethCallRedeemOrBurnPiNfts: Array<Pimeth_RedeemOrBurnPiNftCall>;
  pimethCallRemoveTrustedForwarders: Array<Pimeth_RemoveTrustedForwarderCall>;
  pimethCallRenounceOwnerships: Array<Pimeth_RenounceOwnershipCall>;
  pimethCallSetPiMarkets: Array<Pimeth_SetPiMarketCall>;
  pimethCallTransferOwnerships: Array<Pimeth_TransferOwnershipCall>;
  pimethCallUnpauses: Array<Pimeth_UnpauseCall>;
  pimethCallUpgradeTos: Array<Pimeth_UpgradeToCall>;
  pimethCallUpgradeToAndCalls: Array<Pimeth_UpgradeToAndCallCall>;
  pimethCallWithdraws: Array<Pimeth_WithdrawCall>;
  pimarkCallBids: Array<Pimark_BidCall>;
  pimarkCallBuyNfts: Array<Pimark_BuyNftCall>;
  pimarkCallSellNftByBids: Array<Pimark_SellNftByBidCall>;
  pimarkCallAcceptSwapRequests: Array<Pimark_AcceptSwapRequestCall>;
  pimarkCallCancelSales: Array<Pimark_CancelSaleCall>;
  pimarkCallCancelSwaps: Array<Pimark_CancelSwapCall>;
  pimarkCallEditSalePrices: Array<Pimark_EditSalePriceCall>;
  pimarkCallExecuteBidOrders: Array<Pimark_ExecuteBidOrderCall>;
  pimarkCallInitializes: Array<Pimark_InitializeCall>;
  pimarkCallMakeSwapRequests: Array<Pimark_MakeSwapRequestCall>;
  pimarkCallOnErc721Receiveds: Array<Pimark_OnErc721ReceivedCall>;
  pimarkCallPauses: Array<Pimark_PauseCall>;
  pimarkCallRenounceOwnerships: Array<Pimark_RenounceOwnershipCall>;
  pimarkCallSellNfts: Array<Pimark_SellNftCall>;
  pimarkCallTransferOwnerships: Array<Pimark_TransferOwnershipCall>;
  pimarkCallUnpauses: Array<Pimark_UnpauseCall>;
  pimarkCallUpgradeTos: Array<Pimark_UpgradeToCall>;
  pimarkCallUpgradeToAndCalls: Array<Pimark_UpgradeToAndCallCall>;
  pimarkCallWithdrawBidMonies: Array<Pimark_WithdrawBidMoneyCall>;
  validatednftCallApproves: Array<Validatednft_ApproveCall>;
  validatednftCallDeleteNfts: Array<Validatednft_DeleteNftCall>;
  validatednftCallDeleteValidatorRoyalties: Array<Validatednft_DeleteValidatorRoyaltiesCall>;
  validatednftCallInitializes: Array<Validatednft_InitializeCall>;
  validatednftCallMintValidatedNfts: Array<Validatednft_MintValidatedNftCall>;
  validatednftCallOnErc721Receiveds: Array<Validatednft_OnErc721ReceivedCall>;
  validatednftCallPauses: Array<Validatednft_PauseCall>;
  validatednftCallRenounceOwnerships: Array<Validatednft_RenounceOwnershipCall>;
  validatednftCallSafeTransferFrom1s: Array<Validatednft_SafeTransferFrom1call>;
  validatednftCallSafeTransferFrom2s: Array<Validatednft_SafeTransferFrom2call>;
  validatednftCallSetApprovalForAlls: Array<Validatednft_SetApprovalForAllCall>;
  validatednftCallSetRoyaltiesForValidators: Array<Validatednft_SetRoyaltiesForValidatorCall>;
  validatednftCallTransferFroms: Array<Validatednft_TransferFromCall>;
  validatednftCallTransferOwnerships: Array<Validatednft_TransferOwnershipCall>;
  validatednftCallUnpauses: Array<Validatednft_UnpauseCall>;
  validatednftCallUpgradeTos: Array<Validatednft_UpgradeToCall>;
  validatednftCallUpgradeToAndCalls: Array<Validatednft_UpgradeToAndCallCall>;

  constructor(
    acofeeCallRenounceOwnerships: Array<Acofee_RenounceOwnershipCall> = [],
    acofeeCallSetAconomyNftLendBorrowFees: Array<Acofee_SetAconomyNftLendBorrowFeeCall> = [],
    acofeeCallSetAconomyPiMarketFees: Array<Acofee_SetAconomyPiMarketFeeCall> = [],
    acofeeCallSetAconomyPoolFees: Array<Acofee_SetAconomyPoolFeeCall> = [],
    acofeeCallTransferOwnerships: Array<Acofee_TransferOwnershipCall> = [],
    pinftCallAddTrustedForwarders: Array<Pinft_AddTrustedForwarderCall> = [],
    pinftCallApproves: Array<Pinft_ApproveCall> = [],
    pinftCallDeleteNfts: Array<Pinft_DeleteNftCall> = [],
    pinftCallDeleteValidatorRoyalties: Array<Pinft_DeleteValidatorRoyaltiesCall> = [],
    pinftCallInitializes: Array<Pinft_InitializeCall> = [],
    pinftCallLazyMintNfts: Array<Pinft_LazyMintNftCall> = [],
    pinftCallMintNfts: Array<Pinft_MintNftCall> = [],
    pinftCallPauses: Array<Pinft_PauseCall> = [],
    pinftCallRemoveTrustedForwarders: Array<Pinft_RemoveTrustedForwarderCall> = [],
    pinftCallRenounceOwnerships: Array<Pinft_RenounceOwnershipCall> = [],
    pinftCallSafeTransferFrom1s: Array<Pinft_SafeTransferFrom1call> = [],
    pinftCallSafeTransferFrom2s: Array<Pinft_SafeTransferFrom2call> = [],
    pinftCallSetApprovalForAlls: Array<Pinft_SetApprovalForAllCall> = [],
    pinftCallSetRoyaltiesForValidators: Array<Pinft_SetRoyaltiesForValidatorCall> = [],
    pinftCallTransferFroms: Array<Pinft_TransferFromCall> = [],
    pinftCallTransferOwnerships: Array<Pinft_TransferOwnershipCall> = [],
    pinftCallUnpauses: Array<Pinft_UnpauseCall> = [],
    pinftCallUpgradeTos: Array<Pinft_UpgradeToCall> = [],
    pinftCallUpgradeToAndCalls: Array<Pinft_UpgradeToAndCallCall> = [],
    pimethCallRepays: Array<Pimeth_RepayCall> = [],
    pimethCallAddErc20s: Array<Pimeth_AddErc20call> = [],
    pimethCallAddTrustedForwarders: Array<Pimeth_AddTrustedForwarderCall> = [],
    pimethCallAddValidators: Array<Pimeth_AddValidatorCall> = [],
    pimethCallInitializes: Array<Pimeth_InitializeCall> = [],
    pimethCallLazyAddValidators: Array<Pimeth_LazyAddValidatorCall> = [],
    pimethCallOnErc721Receiveds: Array<Pimeth_OnErc721ReceivedCall> = [],
    pimethCallPaidCommissions: Array<Pimeth_PaidCommissionCall> = [],
    pimethCallPauses: Array<Pimeth_PauseCall> = [],
    pimethCallRedeemOrBurnPiNfts: Array<Pimeth_RedeemOrBurnPiNftCall> = [],
    pimethCallRemoveTrustedForwarders: Array<Pimeth_RemoveTrustedForwarderCall> = [],
    pimethCallRenounceOwnerships: Array<Pimeth_RenounceOwnershipCall> = [],
    pimethCallSetPiMarkets: Array<Pimeth_SetPiMarketCall> = [],
    pimethCallTransferOwnerships: Array<Pimeth_TransferOwnershipCall> = [],
    pimethCallUnpauses: Array<Pimeth_UnpauseCall> = [],
    pimethCallUpgradeTos: Array<Pimeth_UpgradeToCall> = [],
    pimethCallUpgradeToAndCalls: Array<Pimeth_UpgradeToAndCallCall> = [],
    pimethCallWithdraws: Array<Pimeth_WithdrawCall> = [],
    pimarkCallBids: Array<Pimark_BidCall> = [],
    pimarkCallBuyNfts: Array<Pimark_BuyNftCall> = [],
    pimarkCallSellNftByBids: Array<Pimark_SellNftByBidCall> = [],
    pimarkCallAcceptSwapRequests: Array<Pimark_AcceptSwapRequestCall> = [],
    pimarkCallCancelSales: Array<Pimark_CancelSaleCall> = [],
    pimarkCallCancelSwaps: Array<Pimark_CancelSwapCall> = [],
    pimarkCallEditSalePrices: Array<Pimark_EditSalePriceCall> = [],
    pimarkCallExecuteBidOrders: Array<Pimark_ExecuteBidOrderCall> = [],
    pimarkCallInitializes: Array<Pimark_InitializeCall> = [],
    pimarkCallMakeSwapRequests: Array<Pimark_MakeSwapRequestCall> = [],
    pimarkCallOnErc721Receiveds: Array<Pimark_OnErc721ReceivedCall> = [],
    pimarkCallPauses: Array<Pimark_PauseCall> = [],
    pimarkCallRenounceOwnerships: Array<Pimark_RenounceOwnershipCall> = [],
    pimarkCallSellNfts: Array<Pimark_SellNftCall> = [],
    pimarkCallTransferOwnerships: Array<Pimark_TransferOwnershipCall> = [],
    pimarkCallUnpauses: Array<Pimark_UnpauseCall> = [],
    pimarkCallUpgradeTos: Array<Pimark_UpgradeToCall> = [],
    pimarkCallUpgradeToAndCalls: Array<Pimark_UpgradeToAndCallCall> = [],
    pimarkCallWithdrawBidMonies: Array<Pimark_WithdrawBidMoneyCall> = [],
    validatednftCallApproves: Array<Validatednft_ApproveCall> = [],
    validatednftCallDeleteNfts: Array<Validatednft_DeleteNftCall> = [],
    validatednftCallDeleteValidatorRoyalties: Array<Validatednft_DeleteValidatorRoyaltiesCall> = [],
    validatednftCallInitializes: Array<Validatednft_InitializeCall> = [],
    validatednftCallMintValidatedNfts: Array<Validatednft_MintValidatedNftCall> = [],
    validatednftCallOnErc721Receiveds: Array<Validatednft_OnErc721ReceivedCall> = [],
    validatednftCallPauses: Array<Validatednft_PauseCall> = [],
    validatednftCallRenounceOwnerships: Array<Validatednft_RenounceOwnershipCall> = [],
    validatednftCallSafeTransferFrom1s: Array<Validatednft_SafeTransferFrom1call> = [],
    validatednftCallSafeTransferFrom2s: Array<Validatednft_SafeTransferFrom2call> = [],
    validatednftCallSetApprovalForAlls: Array<Validatednft_SetApprovalForAllCall> = [],
    validatednftCallSetRoyaltiesForValidators: Array<Validatednft_SetRoyaltiesForValidatorCall> = [],
    validatednftCallTransferFroms: Array<Validatednft_TransferFromCall> = [],
    validatednftCallTransferOwnerships: Array<Validatednft_TransferOwnershipCall> = [],
    validatednftCallUnpauses: Array<Validatednft_UnpauseCall> = [],
    validatednftCallUpgradeTos: Array<Validatednft_UpgradeToCall> = [],
    validatednftCallUpgradeToAndCalls: Array<Validatednft_UpgradeToAndCallCall> = []
  ) {
    this.acofeeCallRenounceOwnerships = acofeeCallRenounceOwnerships;
    this.acofeeCallSetAconomyNftLendBorrowFees =
      acofeeCallSetAconomyNftLendBorrowFees;
    this.acofeeCallSetAconomyPiMarketFees = acofeeCallSetAconomyPiMarketFees;
    this.acofeeCallSetAconomyPoolFees = acofeeCallSetAconomyPoolFees;
    this.acofeeCallTransferOwnerships = acofeeCallTransferOwnerships;
    this.pinftCallAddTrustedForwarders = pinftCallAddTrustedForwarders;
    this.pinftCallApproves = pinftCallApproves;
    this.pinftCallDeleteNfts = pinftCallDeleteNfts;
    this.pinftCallDeleteValidatorRoyalties = pinftCallDeleteValidatorRoyalties;
    this.pinftCallInitializes = pinftCallInitializes;
    this.pinftCallLazyMintNfts = pinftCallLazyMintNfts;
    this.pinftCallMintNfts = pinftCallMintNfts;
    this.pinftCallPauses = pinftCallPauses;
    this.pinftCallRemoveTrustedForwarders = pinftCallRemoveTrustedForwarders;
    this.pinftCallRenounceOwnerships = pinftCallRenounceOwnerships;
    this.pinftCallSafeTransferFrom1s = pinftCallSafeTransferFrom1s;
    this.pinftCallSafeTransferFrom2s = pinftCallSafeTransferFrom2s;
    this.pinftCallSetApprovalForAlls = pinftCallSetApprovalForAlls;
    this.pinftCallSetRoyaltiesForValidators =
      pinftCallSetRoyaltiesForValidators;
    this.pinftCallTransferFroms = pinftCallTransferFroms;
    this.pinftCallTransferOwnerships = pinftCallTransferOwnerships;
    this.pinftCallUnpauses = pinftCallUnpauses;
    this.pinftCallUpgradeTos = pinftCallUpgradeTos;
    this.pinftCallUpgradeToAndCalls = pinftCallUpgradeToAndCalls;
    this.pimethCallRepays = pimethCallRepays;
    this.pimethCallAddErc20s = pimethCallAddErc20s;
    this.pimethCallAddTrustedForwarders = pimethCallAddTrustedForwarders;
    this.pimethCallAddValidators = pimethCallAddValidators;
    this.pimethCallInitializes = pimethCallInitializes;
    this.pimethCallLazyAddValidators = pimethCallLazyAddValidators;
    this.pimethCallOnErc721Receiveds = pimethCallOnErc721Receiveds;
    this.pimethCallPaidCommissions = pimethCallPaidCommissions;
    this.pimethCallPauses = pimethCallPauses;
    this.pimethCallRedeemOrBurnPiNfts = pimethCallRedeemOrBurnPiNfts;
    this.pimethCallRemoveTrustedForwarders = pimethCallRemoveTrustedForwarders;
    this.pimethCallRenounceOwnerships = pimethCallRenounceOwnerships;
    this.pimethCallSetPiMarkets = pimethCallSetPiMarkets;
    this.pimethCallTransferOwnerships = pimethCallTransferOwnerships;
    this.pimethCallUnpauses = pimethCallUnpauses;
    this.pimethCallUpgradeTos = pimethCallUpgradeTos;
    this.pimethCallUpgradeToAndCalls = pimethCallUpgradeToAndCalls;
    this.pimethCallWithdraws = pimethCallWithdraws;
    this.pimarkCallBids = pimarkCallBids;
    this.pimarkCallBuyNfts = pimarkCallBuyNfts;
    this.pimarkCallSellNftByBids = pimarkCallSellNftByBids;
    this.pimarkCallAcceptSwapRequests = pimarkCallAcceptSwapRequests;
    this.pimarkCallCancelSales = pimarkCallCancelSales;
    this.pimarkCallCancelSwaps = pimarkCallCancelSwaps;
    this.pimarkCallEditSalePrices = pimarkCallEditSalePrices;
    this.pimarkCallExecuteBidOrders = pimarkCallExecuteBidOrders;
    this.pimarkCallInitializes = pimarkCallInitializes;
    this.pimarkCallMakeSwapRequests = pimarkCallMakeSwapRequests;
    this.pimarkCallOnErc721Receiveds = pimarkCallOnErc721Receiveds;
    this.pimarkCallPauses = pimarkCallPauses;
    this.pimarkCallRenounceOwnerships = pimarkCallRenounceOwnerships;
    this.pimarkCallSellNfts = pimarkCallSellNfts;
    this.pimarkCallTransferOwnerships = pimarkCallTransferOwnerships;
    this.pimarkCallUnpauses = pimarkCallUnpauses;
    this.pimarkCallUpgradeTos = pimarkCallUpgradeTos;
    this.pimarkCallUpgradeToAndCalls = pimarkCallUpgradeToAndCalls;
    this.pimarkCallWithdrawBidMonies = pimarkCallWithdrawBidMonies;
    this.validatednftCallApproves = validatednftCallApproves;
    this.validatednftCallDeleteNfts = validatednftCallDeleteNfts;
    this.validatednftCallDeleteValidatorRoyalties =
      validatednftCallDeleteValidatorRoyalties;
    this.validatednftCallInitializes = validatednftCallInitializes;
    this.validatednftCallMintValidatedNfts = validatednftCallMintValidatedNfts;
    this.validatednftCallOnErc721Receiveds = validatednftCallOnErc721Receiveds;
    this.validatednftCallPauses = validatednftCallPauses;
    this.validatednftCallRenounceOwnerships =
      validatednftCallRenounceOwnerships;
    this.validatednftCallSafeTransferFrom1s =
      validatednftCallSafeTransferFrom1s;
    this.validatednftCallSafeTransferFrom2s =
      validatednftCallSafeTransferFrom2s;
    this.validatednftCallSetApprovalForAlls =
      validatednftCallSetApprovalForAlls;
    this.validatednftCallSetRoyaltiesForValidators =
      validatednftCallSetRoyaltiesForValidators;
    this.validatednftCallTransferFroms = validatednftCallTransferFroms;
    this.validatednftCallTransferOwnerships =
      validatednftCallTransferOwnerships;
    this.validatednftCallUnpauses = validatednftCallUnpauses;
    this.validatednftCallUpgradeTos = validatednftCallUpgradeTos;
    this.validatednftCallUpgradeToAndCalls = validatednftCallUpgradeToAndCalls;
  }
}
