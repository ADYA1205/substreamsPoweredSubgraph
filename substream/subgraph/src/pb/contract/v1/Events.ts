// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Acofee_OwnershipTransferred } from "./Acofee_OwnershipTransferred";
import { Acofee_SetAconomyNftLendBorrowFee } from "./Acofee_SetAconomyNftLendBorrowFee";
import { Acofee_SetAconomyPiMarketFee } from "./Acofee_SetAconomyPiMarketFee";
import { Acofee_SetAconomyPoolFee } from "./Acofee_SetAconomyPoolFee";
import { Pinft_AdminChanged1 } from "./Pinft_AdminChanged1";
import { Pinft_AdminChanged2 } from "./Pinft_AdminChanged2";
import { Pinft_Approval } from "./Pinft_Approval";
import { Pinft_ApprovalForAll } from "./Pinft_ApprovalForAll";
import { Pinft_BatchMetadataUpdate } from "./Pinft_BatchMetadataUpdate";
import { Pinft_BeaconUpgraded1 } from "./Pinft_BeaconUpgraded1";
import { Pinft_BeaconUpgraded2 } from "./Pinft_BeaconUpgraded2";
import { Pinft_Initialized } from "./Pinft_Initialized";
import { Pinft_MetadataUpdate } from "./Pinft_MetadataUpdate";
import { Pinft_OwnershipTransferred } from "./Pinft_OwnershipTransferred";
import { Pinft_Paused } from "./Pinft_Paused";
import { Pinft_RoyaltiesSetForTokenId } from "./Pinft_RoyaltiesSetForTokenId";
import { Pinft_RoyaltiesSetForValidator } from "./Pinft_RoyaltiesSetForValidator";
import { Pinft_TokenMinted } from "./Pinft_TokenMinted";
import { Pinft_Transfer } from "./Pinft_Transfer";
import { Pinft_Unpaused } from "./Pinft_Unpaused";
import { Pinft_Upgraded1 } from "./Pinft_Upgraded1";
import { Pinft_Upgraded2 } from "./Pinft_Upgraded2";
import { Pimeth_AdminChanged1 } from "./Pimeth_AdminChanged1";
import { Pimeth_AdminChanged2 } from "./Pimeth_AdminChanged2";
import { Pimeth_BeaconUpgraded1 } from "./Pimeth_BeaconUpgraded1";
import { Pimeth_BeaconUpgraded2 } from "./Pimeth_BeaconUpgraded2";
import { Pimeth_Erc20Added } from "./Pimeth_Erc20Added";
import { Pimeth_Erc20Transferred } from "./Pimeth_Erc20Transferred";
import { Pimeth_Initialized } from "./Pimeth_Initialized";
import { Pimeth_OwnershipTransferred } from "./Pimeth_OwnershipTransferred";
import { Pimeth_Paused } from "./Pimeth_Paused";
import { Pimeth_PiNftBurnt } from "./Pimeth_PiNftBurnt";
import { Pimeth_PiNftRedeemed } from "./Pimeth_PiNftRedeemed";
import { Pimeth_Unpaused } from "./Pimeth_Unpaused";
import { Pimeth_Upgraded1 } from "./Pimeth_Upgraded1";
import { Pimeth_Upgraded2 } from "./Pimeth_Upgraded2";
import { Pimeth_ValidatorAdded } from "./Pimeth_ValidatorAdded";
import { Pimeth_ValidatorFundsRepayed } from "./Pimeth_ValidatorFundsRepayed";
import { Pimeth_ValidatorFundsWithdrawn } from "./Pimeth_ValidatorFundsWithdrawn";
import { Pimark_AdminChanged1 } from "./Pimark_AdminChanged1";
import { Pimark_AdminChanged2 } from "./Pimark_AdminChanged2";
import { Pimark_BeaconUpgraded1 } from "./Pimark_BeaconUpgraded1";
import { Pimark_BeaconUpgraded2 } from "./Pimark_BeaconUpgraded2";
import { Pimark_BidEvent } from "./Pimark_BidEvent";
import { Pimark_BidWithdrawn } from "./Pimark_BidWithdrawn";
import { Pimark_Initialized } from "./Pimark_Initialized";
import { Pimark_NftBought } from "./Pimark_NftBought";
import { Pimark_OwnershipTransferred } from "./Pimark_OwnershipTransferred";
import { Pimark_Paused } from "./Pimark_Paused";
import { Pimark_SaleCancelled } from "./Pimark_SaleCancelled";
import { Pimark_SaleCreated } from "./Pimark_SaleCreated";
import { Pimark_SwapAccepted } from "./Pimark_SwapAccepted";
import { Pimark_SwapCancelled } from "./Pimark_SwapCancelled";
import { Pimark_SwapProposed } from "./Pimark_SwapProposed";
import { Pimark_Unpaused } from "./Pimark_Unpaused";
import { Pimark_Upgraded1 } from "./Pimark_Upgraded1";
import { Pimark_Upgraded2 } from "./Pimark_Upgraded2";
import { Pimark_UpdatedSalePrice } from "./Pimark_UpdatedSalePrice";
import { Lendborrow_AdminChanged } from "./Lendborrow_AdminChanged";
import { Lendborrow_BeaconUpgraded } from "./Lendborrow_BeaconUpgraded";
import { Lendborrow_Upgraded } from "./Lendborrow_Upgraded";
import { Validatednft_AdminChanged1 } from "./Validatednft_AdminChanged1";
import { Validatednft_AdminChanged2 } from "./Validatednft_AdminChanged2";
import { Validatednft_Approval } from "./Validatednft_Approval";
import { Validatednft_ApprovalForAll } from "./Validatednft_ApprovalForAll";
import { Validatednft_BatchMetadataUpdate } from "./Validatednft_BatchMetadataUpdate";
import { Validatednft_BeaconUpgraded1 } from "./Validatednft_BeaconUpgraded1";
import { Validatednft_BeaconUpgraded2 } from "./Validatednft_BeaconUpgraded2";
import { Validatednft_Initialized } from "./Validatednft_Initialized";
import { Validatednft_MetadataUpdate } from "./Validatednft_MetadataUpdate";
import { Validatednft_OwnershipTransferred } from "./Validatednft_OwnershipTransferred";
import { Validatednft_Paused } from "./Validatednft_Paused";
import { Validatednft_RoyaltiesSetForValidator } from "./Validatednft_RoyaltiesSetForValidator";
import { Validatednft_TokenMinted } from "./Validatednft_TokenMinted";
import { Validatednft_Transfer } from "./Validatednft_Transfer";
import { Validatednft_Unpaused } from "./Validatednft_Unpaused";
import { Validatednft_Upgraded1 } from "./Validatednft_Upgraded1";
import { Validatednft_Upgraded2 } from "./Validatednft_Upgraded2";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const acofeeOwnershipTransferreds = message.acofeeOwnershipTransferreds;
    for (let i: i32 = 0; i < acofeeOwnershipTransferreds.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Acofee_OwnershipTransferred.encode(
        acofeeOwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeSetAconomyNftLendBorrowFees =
      message.acofeeSetAconomyNftLendBorrowFees;
    for (let i: i32 = 0; i < acofeeSetAconomyNftLendBorrowFees.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Acofee_SetAconomyNftLendBorrowFee.encode(
        acofeeSetAconomyNftLendBorrowFees[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeSetAconomyPiMarketFees = message.acofeeSetAconomyPiMarketFees;
    for (let i: i32 = 0; i < acofeeSetAconomyPiMarketFees.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Acofee_SetAconomyPiMarketFee.encode(
        acofeeSetAconomyPiMarketFees[i],
        writer
      );
      writer.ldelim();
    }

    const acofeeSetAconomyPoolFees = message.acofeeSetAconomyPoolFees;
    for (let i: i32 = 0; i < acofeeSetAconomyPoolFees.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Acofee_SetAconomyPoolFee.encode(acofeeSetAconomyPoolFees[i], writer);
      writer.ldelim();
    }

    const pinftAdminChanged1s = message.pinftAdminChanged1s;
    for (let i: i32 = 0; i < pinftAdminChanged1s.length; ++i) {
      writer.uint32(42);
      writer.fork();
      Pinft_AdminChanged1.encode(pinftAdminChanged1s[i], writer);
      writer.ldelim();
    }

    const pinftAdminChanged2s = message.pinftAdminChanged2s;
    for (let i: i32 = 0; i < pinftAdminChanged2s.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Pinft_AdminChanged2.encode(pinftAdminChanged2s[i], writer);
      writer.ldelim();
    }

    const pinftApprovals = message.pinftApprovals;
    for (let i: i32 = 0; i < pinftApprovals.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Pinft_Approval.encode(pinftApprovals[i], writer);
      writer.ldelim();
    }

    const pinftApprovalForAlls = message.pinftApprovalForAlls;
    for (let i: i32 = 0; i < pinftApprovalForAlls.length; ++i) {
      writer.uint32(66);
      writer.fork();
      Pinft_ApprovalForAll.encode(pinftApprovalForAlls[i], writer);
      writer.ldelim();
    }

    const pinftBatchMetadataUpdates = message.pinftBatchMetadataUpdates;
    for (let i: i32 = 0; i < pinftBatchMetadataUpdates.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Pinft_BatchMetadataUpdate.encode(pinftBatchMetadataUpdates[i], writer);
      writer.ldelim();
    }

    const pinftBeaconUpgraded1s = message.pinftBeaconUpgraded1s;
    for (let i: i32 = 0; i < pinftBeaconUpgraded1s.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Pinft_BeaconUpgraded1.encode(pinftBeaconUpgraded1s[i], writer);
      writer.ldelim();
    }

    const pinftBeaconUpgraded2s = message.pinftBeaconUpgraded2s;
    for (let i: i32 = 0; i < pinftBeaconUpgraded2s.length; ++i) {
      writer.uint32(90);
      writer.fork();
      Pinft_BeaconUpgraded2.encode(pinftBeaconUpgraded2s[i], writer);
      writer.ldelim();
    }

    const pinftInitializeds = message.pinftInitializeds;
    for (let i: i32 = 0; i < pinftInitializeds.length; ++i) {
      writer.uint32(98);
      writer.fork();
      Pinft_Initialized.encode(pinftInitializeds[i], writer);
      writer.ldelim();
    }

    const pinftMetadataUpdates = message.pinftMetadataUpdates;
    for (let i: i32 = 0; i < pinftMetadataUpdates.length; ++i) {
      writer.uint32(106);
      writer.fork();
      Pinft_MetadataUpdate.encode(pinftMetadataUpdates[i], writer);
      writer.ldelim();
    }

    const pinftOwnershipTransferreds = message.pinftOwnershipTransferreds;
    for (let i: i32 = 0; i < pinftOwnershipTransferreds.length; ++i) {
      writer.uint32(114);
      writer.fork();
      Pinft_OwnershipTransferred.encode(pinftOwnershipTransferreds[i], writer);
      writer.ldelim();
    }

    const pinftPauseds = message.pinftPauseds;
    for (let i: i32 = 0; i < pinftPauseds.length; ++i) {
      writer.uint32(122);
      writer.fork();
      Pinft_Paused.encode(pinftPauseds[i], writer);
      writer.ldelim();
    }

    const pinftRoyaltiesSetForTokenIds = message.pinftRoyaltiesSetForTokenIds;
    for (let i: i32 = 0; i < pinftRoyaltiesSetForTokenIds.length; ++i) {
      writer.uint32(130);
      writer.fork();
      Pinft_RoyaltiesSetForTokenId.encode(
        pinftRoyaltiesSetForTokenIds[i],
        writer
      );
      writer.ldelim();
    }

    const pinftRoyaltiesSetForValidators =
      message.pinftRoyaltiesSetForValidators;
    for (let i: i32 = 0; i < pinftRoyaltiesSetForValidators.length; ++i) {
      writer.uint32(138);
      writer.fork();
      Pinft_RoyaltiesSetForValidator.encode(
        pinftRoyaltiesSetForValidators[i],
        writer
      );
      writer.ldelim();
    }

    const pinftTokenMinteds = message.pinftTokenMinteds;
    for (let i: i32 = 0; i < pinftTokenMinteds.length; ++i) {
      writer.uint32(146);
      writer.fork();
      Pinft_TokenMinted.encode(pinftTokenMinteds[i], writer);
      writer.ldelim();
    }

    const pinftTransfers = message.pinftTransfers;
    for (let i: i32 = 0; i < pinftTransfers.length; ++i) {
      writer.uint32(154);
      writer.fork();
      Pinft_Transfer.encode(pinftTransfers[i], writer);
      writer.ldelim();
    }

    const pinftUnpauseds = message.pinftUnpauseds;
    for (let i: i32 = 0; i < pinftUnpauseds.length; ++i) {
      writer.uint32(162);
      writer.fork();
      Pinft_Unpaused.encode(pinftUnpauseds[i], writer);
      writer.ldelim();
    }

    const pinftUpgraded1s = message.pinftUpgraded1s;
    for (let i: i32 = 0; i < pinftUpgraded1s.length; ++i) {
      writer.uint32(170);
      writer.fork();
      Pinft_Upgraded1.encode(pinftUpgraded1s[i], writer);
      writer.ldelim();
    }

    const pinftUpgraded2s = message.pinftUpgraded2s;
    for (let i: i32 = 0; i < pinftUpgraded2s.length; ++i) {
      writer.uint32(178);
      writer.fork();
      Pinft_Upgraded2.encode(pinftUpgraded2s[i], writer);
      writer.ldelim();
    }

    const pimethAdminChanged1s = message.pimethAdminChanged1s;
    for (let i: i32 = 0; i < pimethAdminChanged1s.length; ++i) {
      writer.uint32(186);
      writer.fork();
      Pimeth_AdminChanged1.encode(pimethAdminChanged1s[i], writer);
      writer.ldelim();
    }

    const pimethAdminChanged2s = message.pimethAdminChanged2s;
    for (let i: i32 = 0; i < pimethAdminChanged2s.length; ++i) {
      writer.uint32(194);
      writer.fork();
      Pimeth_AdminChanged2.encode(pimethAdminChanged2s[i], writer);
      writer.ldelim();
    }

    const pimethBeaconUpgraded1s = message.pimethBeaconUpgraded1s;
    for (let i: i32 = 0; i < pimethBeaconUpgraded1s.length; ++i) {
      writer.uint32(202);
      writer.fork();
      Pimeth_BeaconUpgraded1.encode(pimethBeaconUpgraded1s[i], writer);
      writer.ldelim();
    }

    const pimethBeaconUpgraded2s = message.pimethBeaconUpgraded2s;
    for (let i: i32 = 0; i < pimethBeaconUpgraded2s.length; ++i) {
      writer.uint32(210);
      writer.fork();
      Pimeth_BeaconUpgraded2.encode(pimethBeaconUpgraded2s[i], writer);
      writer.ldelim();
    }

    const pimethErc20Addeds = message.pimethErc20Addeds;
    for (let i: i32 = 0; i < pimethErc20Addeds.length; ++i) {
      writer.uint32(218);
      writer.fork();
      Pimeth_Erc20Added.encode(pimethErc20Addeds[i], writer);
      writer.ldelim();
    }

    const pimethErc20Transferreds = message.pimethErc20Transferreds;
    for (let i: i32 = 0; i < pimethErc20Transferreds.length; ++i) {
      writer.uint32(226);
      writer.fork();
      Pimeth_Erc20Transferred.encode(pimethErc20Transferreds[i], writer);
      writer.ldelim();
    }

    const pimethInitializeds = message.pimethInitializeds;
    for (let i: i32 = 0; i < pimethInitializeds.length; ++i) {
      writer.uint32(234);
      writer.fork();
      Pimeth_Initialized.encode(pimethInitializeds[i], writer);
      writer.ldelim();
    }

    const pimethOwnershipTransferreds = message.pimethOwnershipTransferreds;
    for (let i: i32 = 0; i < pimethOwnershipTransferreds.length; ++i) {
      writer.uint32(242);
      writer.fork();
      Pimeth_OwnershipTransferred.encode(
        pimethOwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const pimethPauseds = message.pimethPauseds;
    for (let i: i32 = 0; i < pimethPauseds.length; ++i) {
      writer.uint32(250);
      writer.fork();
      Pimeth_Paused.encode(pimethPauseds[i], writer);
      writer.ldelim();
    }

    const pimethPiNftBurnts = message.pimethPiNftBurnts;
    for (let i: i32 = 0; i < pimethPiNftBurnts.length; ++i) {
      writer.uint32(258);
      writer.fork();
      Pimeth_PiNftBurnt.encode(pimethPiNftBurnts[i], writer);
      writer.ldelim();
    }

    const pimethPiNftRedeemeds = message.pimethPiNftRedeemeds;
    for (let i: i32 = 0; i < pimethPiNftRedeemeds.length; ++i) {
      writer.uint32(266);
      writer.fork();
      Pimeth_PiNftRedeemed.encode(pimethPiNftRedeemeds[i], writer);
      writer.ldelim();
    }

    const pimethUnpauseds = message.pimethUnpauseds;
    for (let i: i32 = 0; i < pimethUnpauseds.length; ++i) {
      writer.uint32(274);
      writer.fork();
      Pimeth_Unpaused.encode(pimethUnpauseds[i], writer);
      writer.ldelim();
    }

    const pimethUpgraded1s = message.pimethUpgraded1s;
    for (let i: i32 = 0; i < pimethUpgraded1s.length; ++i) {
      writer.uint32(282);
      writer.fork();
      Pimeth_Upgraded1.encode(pimethUpgraded1s[i], writer);
      writer.ldelim();
    }

    const pimethUpgraded2s = message.pimethUpgraded2s;
    for (let i: i32 = 0; i < pimethUpgraded2s.length; ++i) {
      writer.uint32(290);
      writer.fork();
      Pimeth_Upgraded2.encode(pimethUpgraded2s[i], writer);
      writer.ldelim();
    }

    const pimethValidatorAddeds = message.pimethValidatorAddeds;
    for (let i: i32 = 0; i < pimethValidatorAddeds.length; ++i) {
      writer.uint32(298);
      writer.fork();
      Pimeth_ValidatorAdded.encode(pimethValidatorAddeds[i], writer);
      writer.ldelim();
    }

    const pimethValidatorFundsRepayeds = message.pimethValidatorFundsRepayeds;
    for (let i: i32 = 0; i < pimethValidatorFundsRepayeds.length; ++i) {
      writer.uint32(306);
      writer.fork();
      Pimeth_ValidatorFundsRepayed.encode(
        pimethValidatorFundsRepayeds[i],
        writer
      );
      writer.ldelim();
    }

    const pimethValidatorFundsWithdrawns =
      message.pimethValidatorFundsWithdrawns;
    for (let i: i32 = 0; i < pimethValidatorFundsWithdrawns.length; ++i) {
      writer.uint32(314);
      writer.fork();
      Pimeth_ValidatorFundsWithdrawn.encode(
        pimethValidatorFundsWithdrawns[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkAdminChanged1s = message.pimarkAdminChanged1s;
    for (let i: i32 = 0; i < pimarkAdminChanged1s.length; ++i) {
      writer.uint32(322);
      writer.fork();
      Pimark_AdminChanged1.encode(pimarkAdminChanged1s[i], writer);
      writer.ldelim();
    }

    const pimarkAdminChanged2s = message.pimarkAdminChanged2s;
    for (let i: i32 = 0; i < pimarkAdminChanged2s.length; ++i) {
      writer.uint32(330);
      writer.fork();
      Pimark_AdminChanged2.encode(pimarkAdminChanged2s[i], writer);
      writer.ldelim();
    }

    const pimarkBeaconUpgraded1s = message.pimarkBeaconUpgraded1s;
    for (let i: i32 = 0; i < pimarkBeaconUpgraded1s.length; ++i) {
      writer.uint32(338);
      writer.fork();
      Pimark_BeaconUpgraded1.encode(pimarkBeaconUpgraded1s[i], writer);
      writer.ldelim();
    }

    const pimarkBeaconUpgraded2s = message.pimarkBeaconUpgraded2s;
    for (let i: i32 = 0; i < pimarkBeaconUpgraded2s.length; ++i) {
      writer.uint32(346);
      writer.fork();
      Pimark_BeaconUpgraded2.encode(pimarkBeaconUpgraded2s[i], writer);
      writer.ldelim();
    }

    const pimarkBidEvents = message.pimarkBidEvents;
    for (let i: i32 = 0; i < pimarkBidEvents.length; ++i) {
      writer.uint32(354);
      writer.fork();
      Pimark_BidEvent.encode(pimarkBidEvents[i], writer);
      writer.ldelim();
    }

    const pimarkBidWithdrawns = message.pimarkBidWithdrawns;
    for (let i: i32 = 0; i < pimarkBidWithdrawns.length; ++i) {
      writer.uint32(362);
      writer.fork();
      Pimark_BidWithdrawn.encode(pimarkBidWithdrawns[i], writer);
      writer.ldelim();
    }

    const pimarkInitializeds = message.pimarkInitializeds;
    for (let i: i32 = 0; i < pimarkInitializeds.length; ++i) {
      writer.uint32(370);
      writer.fork();
      Pimark_Initialized.encode(pimarkInitializeds[i], writer);
      writer.ldelim();
    }

    const pimarkNftBoughts = message.pimarkNftBoughts;
    for (let i: i32 = 0; i < pimarkNftBoughts.length; ++i) {
      writer.uint32(378);
      writer.fork();
      Pimark_NftBought.encode(pimarkNftBoughts[i], writer);
      writer.ldelim();
    }

    const pimarkOwnershipTransferreds = message.pimarkOwnershipTransferreds;
    for (let i: i32 = 0; i < pimarkOwnershipTransferreds.length; ++i) {
      writer.uint32(386);
      writer.fork();
      Pimark_OwnershipTransferred.encode(
        pimarkOwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const pimarkPauseds = message.pimarkPauseds;
    for (let i: i32 = 0; i < pimarkPauseds.length; ++i) {
      writer.uint32(394);
      writer.fork();
      Pimark_Paused.encode(pimarkPauseds[i], writer);
      writer.ldelim();
    }

    const pimarkSaleCancelleds = message.pimarkSaleCancelleds;
    for (let i: i32 = 0; i < pimarkSaleCancelleds.length; ++i) {
      writer.uint32(402);
      writer.fork();
      Pimark_SaleCancelled.encode(pimarkSaleCancelleds[i], writer);
      writer.ldelim();
    }

    const pimarkSaleCreateds = message.pimarkSaleCreateds;
    for (let i: i32 = 0; i < pimarkSaleCreateds.length; ++i) {
      writer.uint32(410);
      writer.fork();
      Pimark_SaleCreated.encode(pimarkSaleCreateds[i], writer);
      writer.ldelim();
    }

    const pimarkSwapAccepteds = message.pimarkSwapAccepteds;
    for (let i: i32 = 0; i < pimarkSwapAccepteds.length; ++i) {
      writer.uint32(418);
      writer.fork();
      Pimark_SwapAccepted.encode(pimarkSwapAccepteds[i], writer);
      writer.ldelim();
    }

    const pimarkSwapCancelleds = message.pimarkSwapCancelleds;
    for (let i: i32 = 0; i < pimarkSwapCancelleds.length; ++i) {
      writer.uint32(426);
      writer.fork();
      Pimark_SwapCancelled.encode(pimarkSwapCancelleds[i], writer);
      writer.ldelim();
    }

    const pimarkSwapProposeds = message.pimarkSwapProposeds;
    for (let i: i32 = 0; i < pimarkSwapProposeds.length; ++i) {
      writer.uint32(434);
      writer.fork();
      Pimark_SwapProposed.encode(pimarkSwapProposeds[i], writer);
      writer.ldelim();
    }

    const pimarkUnpauseds = message.pimarkUnpauseds;
    for (let i: i32 = 0; i < pimarkUnpauseds.length; ++i) {
      writer.uint32(442);
      writer.fork();
      Pimark_Unpaused.encode(pimarkUnpauseds[i], writer);
      writer.ldelim();
    }

    const pimarkUpgraded1s = message.pimarkUpgraded1s;
    for (let i: i32 = 0; i < pimarkUpgraded1s.length; ++i) {
      writer.uint32(450);
      writer.fork();
      Pimark_Upgraded1.encode(pimarkUpgraded1s[i], writer);
      writer.ldelim();
    }

    const pimarkUpgraded2s = message.pimarkUpgraded2s;
    for (let i: i32 = 0; i < pimarkUpgraded2s.length; ++i) {
      writer.uint32(458);
      writer.fork();
      Pimark_Upgraded2.encode(pimarkUpgraded2s[i], writer);
      writer.ldelim();
    }

    const pimarkUpdatedSalePrices = message.pimarkUpdatedSalePrices;
    for (let i: i32 = 0; i < pimarkUpdatedSalePrices.length; ++i) {
      writer.uint32(466);
      writer.fork();
      Pimark_UpdatedSalePrice.encode(pimarkUpdatedSalePrices[i], writer);
      writer.ldelim();
    }

    const lendborrowAdminChangeds = message.lendborrowAdminChangeds;
    for (let i: i32 = 0; i < lendborrowAdminChangeds.length; ++i) {
      writer.uint32(474);
      writer.fork();
      Lendborrow_AdminChanged.encode(lendborrowAdminChangeds[i], writer);
      writer.ldelim();
    }

    const lendborrowBeaconUpgradeds = message.lendborrowBeaconUpgradeds;
    for (let i: i32 = 0; i < lendborrowBeaconUpgradeds.length; ++i) {
      writer.uint32(482);
      writer.fork();
      Lendborrow_BeaconUpgraded.encode(lendborrowBeaconUpgradeds[i], writer);
      writer.ldelim();
    }

    const lendborrowUpgradeds = message.lendborrowUpgradeds;
    for (let i: i32 = 0; i < lendborrowUpgradeds.length; ++i) {
      writer.uint32(490);
      writer.fork();
      Lendborrow_Upgraded.encode(lendborrowUpgradeds[i], writer);
      writer.ldelim();
    }

    const validatednftAdminChanged1s = message.validatednftAdminChanged1s;
    for (let i: i32 = 0; i < validatednftAdminChanged1s.length; ++i) {
      writer.uint32(498);
      writer.fork();
      Validatednft_AdminChanged1.encode(validatednftAdminChanged1s[i], writer);
      writer.ldelim();
    }

    const validatednftAdminChanged2s = message.validatednftAdminChanged2s;
    for (let i: i32 = 0; i < validatednftAdminChanged2s.length; ++i) {
      writer.uint32(506);
      writer.fork();
      Validatednft_AdminChanged2.encode(validatednftAdminChanged2s[i], writer);
      writer.ldelim();
    }

    const validatednftApprovals = message.validatednftApprovals;
    for (let i: i32 = 0; i < validatednftApprovals.length; ++i) {
      writer.uint32(514);
      writer.fork();
      Validatednft_Approval.encode(validatednftApprovals[i], writer);
      writer.ldelim();
    }

    const validatednftApprovalForAlls = message.validatednftApprovalForAlls;
    for (let i: i32 = 0; i < validatednftApprovalForAlls.length; ++i) {
      writer.uint32(522);
      writer.fork();
      Validatednft_ApprovalForAll.encode(
        validatednftApprovalForAlls[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftBatchMetadataUpdates =
      message.validatednftBatchMetadataUpdates;
    for (let i: i32 = 0; i < validatednftBatchMetadataUpdates.length; ++i) {
      writer.uint32(530);
      writer.fork();
      Validatednft_BatchMetadataUpdate.encode(
        validatednftBatchMetadataUpdates[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftBeaconUpgraded1s = message.validatednftBeaconUpgraded1s;
    for (let i: i32 = 0; i < validatednftBeaconUpgraded1s.length; ++i) {
      writer.uint32(538);
      writer.fork();
      Validatednft_BeaconUpgraded1.encode(
        validatednftBeaconUpgraded1s[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftBeaconUpgraded2s = message.validatednftBeaconUpgraded2s;
    for (let i: i32 = 0; i < validatednftBeaconUpgraded2s.length; ++i) {
      writer.uint32(546);
      writer.fork();
      Validatednft_BeaconUpgraded2.encode(
        validatednftBeaconUpgraded2s[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftInitializeds = message.validatednftInitializeds;
    for (let i: i32 = 0; i < validatednftInitializeds.length; ++i) {
      writer.uint32(554);
      writer.fork();
      Validatednft_Initialized.encode(validatednftInitializeds[i], writer);
      writer.ldelim();
    }

    const validatednftMetadataUpdates = message.validatednftMetadataUpdates;
    for (let i: i32 = 0; i < validatednftMetadataUpdates.length; ++i) {
      writer.uint32(562);
      writer.fork();
      Validatednft_MetadataUpdate.encode(
        validatednftMetadataUpdates[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftOwnershipTransferreds =
      message.validatednftOwnershipTransferreds;
    for (let i: i32 = 0; i < validatednftOwnershipTransferreds.length; ++i) {
      writer.uint32(570);
      writer.fork();
      Validatednft_OwnershipTransferred.encode(
        validatednftOwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftPauseds = message.validatednftPauseds;
    for (let i: i32 = 0; i < validatednftPauseds.length; ++i) {
      writer.uint32(578);
      writer.fork();
      Validatednft_Paused.encode(validatednftPauseds[i], writer);
      writer.ldelim();
    }

    const validatednftRoyaltiesSetForValidators =
      message.validatednftRoyaltiesSetForValidators;
    for (
      let i: i32 = 0;
      i < validatednftRoyaltiesSetForValidators.length;
      ++i
    ) {
      writer.uint32(586);
      writer.fork();
      Validatednft_RoyaltiesSetForValidator.encode(
        validatednftRoyaltiesSetForValidators[i],
        writer
      );
      writer.ldelim();
    }

    const validatednftTokenMinteds = message.validatednftTokenMinteds;
    for (let i: i32 = 0; i < validatednftTokenMinteds.length; ++i) {
      writer.uint32(594);
      writer.fork();
      Validatednft_TokenMinted.encode(validatednftTokenMinteds[i], writer);
      writer.ldelim();
    }

    const validatednftTransfers = message.validatednftTransfers;
    for (let i: i32 = 0; i < validatednftTransfers.length; ++i) {
      writer.uint32(602);
      writer.fork();
      Validatednft_Transfer.encode(validatednftTransfers[i], writer);
      writer.ldelim();
    }

    const validatednftUnpauseds = message.validatednftUnpauseds;
    for (let i: i32 = 0; i < validatednftUnpauseds.length; ++i) {
      writer.uint32(610);
      writer.fork();
      Validatednft_Unpaused.encode(validatednftUnpauseds[i], writer);
      writer.ldelim();
    }

    const validatednftUpgraded1s = message.validatednftUpgraded1s;
    for (let i: i32 = 0; i < validatednftUpgraded1s.length; ++i) {
      writer.uint32(618);
      writer.fork();
      Validatednft_Upgraded1.encode(validatednftUpgraded1s[i], writer);
      writer.ldelim();
    }

    const validatednftUpgraded2s = message.validatednftUpgraded2s;
    for (let i: i32 = 0; i < validatednftUpgraded2s.length; ++i) {
      writer.uint32(626);
      writer.fork();
      Validatednft_Upgraded2.encode(validatednftUpgraded2s[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.acofeeOwnershipTransferreds.push(
            Acofee_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.acofeeSetAconomyNftLendBorrowFees.push(
            Acofee_SetAconomyNftLendBorrowFee.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.acofeeSetAconomyPiMarketFees.push(
            Acofee_SetAconomyPiMarketFee.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.acofeeSetAconomyPoolFees.push(
            Acofee_SetAconomyPoolFee.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.pinftAdminChanged1s.push(
            Pinft_AdminChanged1.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.pinftAdminChanged2s.push(
            Pinft_AdminChanged2.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.pinftApprovals.push(
            Pinft_Approval.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.pinftApprovalForAlls.push(
            Pinft_ApprovalForAll.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.pinftBatchMetadataUpdates.push(
            Pinft_BatchMetadataUpdate.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.pinftBeaconUpgraded1s.push(
            Pinft_BeaconUpgraded1.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.pinftBeaconUpgraded2s.push(
            Pinft_BeaconUpgraded2.decode(reader, reader.uint32())
          );
          break;

        case 12:
          message.pinftInitializeds.push(
            Pinft_Initialized.decode(reader, reader.uint32())
          );
          break;

        case 13:
          message.pinftMetadataUpdates.push(
            Pinft_MetadataUpdate.decode(reader, reader.uint32())
          );
          break;

        case 14:
          message.pinftOwnershipTransferreds.push(
            Pinft_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 15:
          message.pinftPauseds.push(
            Pinft_Paused.decode(reader, reader.uint32())
          );
          break;

        case 16:
          message.pinftRoyaltiesSetForTokenIds.push(
            Pinft_RoyaltiesSetForTokenId.decode(reader, reader.uint32())
          );
          break;

        case 17:
          message.pinftRoyaltiesSetForValidators.push(
            Pinft_RoyaltiesSetForValidator.decode(reader, reader.uint32())
          );
          break;

        case 18:
          message.pinftTokenMinteds.push(
            Pinft_TokenMinted.decode(reader, reader.uint32())
          );
          break;

        case 19:
          message.pinftTransfers.push(
            Pinft_Transfer.decode(reader, reader.uint32())
          );
          break;

        case 20:
          message.pinftUnpauseds.push(
            Pinft_Unpaused.decode(reader, reader.uint32())
          );
          break;

        case 21:
          message.pinftUpgraded1s.push(
            Pinft_Upgraded1.decode(reader, reader.uint32())
          );
          break;

        case 22:
          message.pinftUpgraded2s.push(
            Pinft_Upgraded2.decode(reader, reader.uint32())
          );
          break;

        case 23:
          message.pimethAdminChanged1s.push(
            Pimeth_AdminChanged1.decode(reader, reader.uint32())
          );
          break;

        case 24:
          message.pimethAdminChanged2s.push(
            Pimeth_AdminChanged2.decode(reader, reader.uint32())
          );
          break;

        case 25:
          message.pimethBeaconUpgraded1s.push(
            Pimeth_BeaconUpgraded1.decode(reader, reader.uint32())
          );
          break;

        case 26:
          message.pimethBeaconUpgraded2s.push(
            Pimeth_BeaconUpgraded2.decode(reader, reader.uint32())
          );
          break;

        case 27:
          message.pimethErc20Addeds.push(
            Pimeth_Erc20Added.decode(reader, reader.uint32())
          );
          break;

        case 28:
          message.pimethErc20Transferreds.push(
            Pimeth_Erc20Transferred.decode(reader, reader.uint32())
          );
          break;

        case 29:
          message.pimethInitializeds.push(
            Pimeth_Initialized.decode(reader, reader.uint32())
          );
          break;

        case 30:
          message.pimethOwnershipTransferreds.push(
            Pimeth_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 31:
          message.pimethPauseds.push(
            Pimeth_Paused.decode(reader, reader.uint32())
          );
          break;

        case 32:
          message.pimethPiNftBurnts.push(
            Pimeth_PiNftBurnt.decode(reader, reader.uint32())
          );
          break;

        case 33:
          message.pimethPiNftRedeemeds.push(
            Pimeth_PiNftRedeemed.decode(reader, reader.uint32())
          );
          break;

        case 34:
          message.pimethUnpauseds.push(
            Pimeth_Unpaused.decode(reader, reader.uint32())
          );
          break;

        case 35:
          message.pimethUpgraded1s.push(
            Pimeth_Upgraded1.decode(reader, reader.uint32())
          );
          break;

        case 36:
          message.pimethUpgraded2s.push(
            Pimeth_Upgraded2.decode(reader, reader.uint32())
          );
          break;

        case 37:
          message.pimethValidatorAddeds.push(
            Pimeth_ValidatorAdded.decode(reader, reader.uint32())
          );
          break;

        case 38:
          message.pimethValidatorFundsRepayeds.push(
            Pimeth_ValidatorFundsRepayed.decode(reader, reader.uint32())
          );
          break;

        case 39:
          message.pimethValidatorFundsWithdrawns.push(
            Pimeth_ValidatorFundsWithdrawn.decode(reader, reader.uint32())
          );
          break;

        case 40:
          message.pimarkAdminChanged1s.push(
            Pimark_AdminChanged1.decode(reader, reader.uint32())
          );
          break;

        case 41:
          message.pimarkAdminChanged2s.push(
            Pimark_AdminChanged2.decode(reader, reader.uint32())
          );
          break;

        case 42:
          message.pimarkBeaconUpgraded1s.push(
            Pimark_BeaconUpgraded1.decode(reader, reader.uint32())
          );
          break;

        case 43:
          message.pimarkBeaconUpgraded2s.push(
            Pimark_BeaconUpgraded2.decode(reader, reader.uint32())
          );
          break;

        case 44:
          message.pimarkBidEvents.push(
            Pimark_BidEvent.decode(reader, reader.uint32())
          );
          break;

        case 45:
          message.pimarkBidWithdrawns.push(
            Pimark_BidWithdrawn.decode(reader, reader.uint32())
          );
          break;

        case 46:
          message.pimarkInitializeds.push(
            Pimark_Initialized.decode(reader, reader.uint32())
          );
          break;

        case 47:
          message.pimarkNftBoughts.push(
            Pimark_NftBought.decode(reader, reader.uint32())
          );
          break;

        case 48:
          message.pimarkOwnershipTransferreds.push(
            Pimark_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 49:
          message.pimarkPauseds.push(
            Pimark_Paused.decode(reader, reader.uint32())
          );
          break;

        case 50:
          message.pimarkSaleCancelleds.push(
            Pimark_SaleCancelled.decode(reader, reader.uint32())
          );
          break;

        case 51:
          message.pimarkSaleCreateds.push(
            Pimark_SaleCreated.decode(reader, reader.uint32())
          );
          break;

        case 52:
          message.pimarkSwapAccepteds.push(
            Pimark_SwapAccepted.decode(reader, reader.uint32())
          );
          break;

        case 53:
          message.pimarkSwapCancelleds.push(
            Pimark_SwapCancelled.decode(reader, reader.uint32())
          );
          break;

        case 54:
          message.pimarkSwapProposeds.push(
            Pimark_SwapProposed.decode(reader, reader.uint32())
          );
          break;

        case 55:
          message.pimarkUnpauseds.push(
            Pimark_Unpaused.decode(reader, reader.uint32())
          );
          break;

        case 56:
          message.pimarkUpgraded1s.push(
            Pimark_Upgraded1.decode(reader, reader.uint32())
          );
          break;

        case 57:
          message.pimarkUpgraded2s.push(
            Pimark_Upgraded2.decode(reader, reader.uint32())
          );
          break;

        case 58:
          message.pimarkUpdatedSalePrices.push(
            Pimark_UpdatedSalePrice.decode(reader, reader.uint32())
          );
          break;

        case 59:
          message.lendborrowAdminChangeds.push(
            Lendborrow_AdminChanged.decode(reader, reader.uint32())
          );
          break;

        case 60:
          message.lendborrowBeaconUpgradeds.push(
            Lendborrow_BeaconUpgraded.decode(reader, reader.uint32())
          );
          break;

        case 61:
          message.lendborrowUpgradeds.push(
            Lendborrow_Upgraded.decode(reader, reader.uint32())
          );
          break;

        case 62:
          message.validatednftAdminChanged1s.push(
            Validatednft_AdminChanged1.decode(reader, reader.uint32())
          );
          break;

        case 63:
          message.validatednftAdminChanged2s.push(
            Validatednft_AdminChanged2.decode(reader, reader.uint32())
          );
          break;

        case 64:
          message.validatednftApprovals.push(
            Validatednft_Approval.decode(reader, reader.uint32())
          );
          break;

        case 65:
          message.validatednftApprovalForAlls.push(
            Validatednft_ApprovalForAll.decode(reader, reader.uint32())
          );
          break;

        case 66:
          message.validatednftBatchMetadataUpdates.push(
            Validatednft_BatchMetadataUpdate.decode(reader, reader.uint32())
          );
          break;

        case 67:
          message.validatednftBeaconUpgraded1s.push(
            Validatednft_BeaconUpgraded1.decode(reader, reader.uint32())
          );
          break;

        case 68:
          message.validatednftBeaconUpgraded2s.push(
            Validatednft_BeaconUpgraded2.decode(reader, reader.uint32())
          );
          break;

        case 69:
          message.validatednftInitializeds.push(
            Validatednft_Initialized.decode(reader, reader.uint32())
          );
          break;

        case 70:
          message.validatednftMetadataUpdates.push(
            Validatednft_MetadataUpdate.decode(reader, reader.uint32())
          );
          break;

        case 71:
          message.validatednftOwnershipTransferreds.push(
            Validatednft_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 72:
          message.validatednftPauseds.push(
            Validatednft_Paused.decode(reader, reader.uint32())
          );
          break;

        case 73:
          message.validatednftRoyaltiesSetForValidators.push(
            Validatednft_RoyaltiesSetForValidator.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 74:
          message.validatednftTokenMinteds.push(
            Validatednft_TokenMinted.decode(reader, reader.uint32())
          );
          break;

        case 75:
          message.validatednftTransfers.push(
            Validatednft_Transfer.decode(reader, reader.uint32())
          );
          break;

        case 76:
          message.validatednftUnpauseds.push(
            Validatednft_Unpaused.decode(reader, reader.uint32())
          );
          break;

        case 77:
          message.validatednftUpgraded1s.push(
            Validatednft_Upgraded1.decode(reader, reader.uint32())
          );
          break;

        case 78:
          message.validatednftUpgraded2s.push(
            Validatednft_Upgraded2.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  acofeeOwnershipTransferreds: Array<Acofee_OwnershipTransferred>;
  acofeeSetAconomyNftLendBorrowFees: Array<Acofee_SetAconomyNftLendBorrowFee>;
  acofeeSetAconomyPiMarketFees: Array<Acofee_SetAconomyPiMarketFee>;
  acofeeSetAconomyPoolFees: Array<Acofee_SetAconomyPoolFee>;
  pinftAdminChanged1s: Array<Pinft_AdminChanged1>;
  pinftAdminChanged2s: Array<Pinft_AdminChanged2>;
  pinftApprovals: Array<Pinft_Approval>;
  pinftApprovalForAlls: Array<Pinft_ApprovalForAll>;
  pinftBatchMetadataUpdates: Array<Pinft_BatchMetadataUpdate>;
  pinftBeaconUpgraded1s: Array<Pinft_BeaconUpgraded1>;
  pinftBeaconUpgraded2s: Array<Pinft_BeaconUpgraded2>;
  pinftInitializeds: Array<Pinft_Initialized>;
  pinftMetadataUpdates: Array<Pinft_MetadataUpdate>;
  pinftOwnershipTransferreds: Array<Pinft_OwnershipTransferred>;
  pinftPauseds: Array<Pinft_Paused>;
  pinftRoyaltiesSetForTokenIds: Array<Pinft_RoyaltiesSetForTokenId>;
  pinftRoyaltiesSetForValidators: Array<Pinft_RoyaltiesSetForValidator>;
  pinftTokenMinteds: Array<Pinft_TokenMinted>;
  pinftTransfers: Array<Pinft_Transfer>;
  pinftUnpauseds: Array<Pinft_Unpaused>;
  pinftUpgraded1s: Array<Pinft_Upgraded1>;
  pinftUpgraded2s: Array<Pinft_Upgraded2>;
  pimethAdminChanged1s: Array<Pimeth_AdminChanged1>;
  pimethAdminChanged2s: Array<Pimeth_AdminChanged2>;
  pimethBeaconUpgraded1s: Array<Pimeth_BeaconUpgraded1>;
  pimethBeaconUpgraded2s: Array<Pimeth_BeaconUpgraded2>;
  pimethErc20Addeds: Array<Pimeth_Erc20Added>;
  pimethErc20Transferreds: Array<Pimeth_Erc20Transferred>;
  pimethInitializeds: Array<Pimeth_Initialized>;
  pimethOwnershipTransferreds: Array<Pimeth_OwnershipTransferred>;
  pimethPauseds: Array<Pimeth_Paused>;
  pimethPiNftBurnts: Array<Pimeth_PiNftBurnt>;
  pimethPiNftRedeemeds: Array<Pimeth_PiNftRedeemed>;
  pimethUnpauseds: Array<Pimeth_Unpaused>;
  pimethUpgraded1s: Array<Pimeth_Upgraded1>;
  pimethUpgraded2s: Array<Pimeth_Upgraded2>;
  pimethValidatorAddeds: Array<Pimeth_ValidatorAdded>;
  pimethValidatorFundsRepayeds: Array<Pimeth_ValidatorFundsRepayed>;
  pimethValidatorFundsWithdrawns: Array<Pimeth_ValidatorFundsWithdrawn>;
  pimarkAdminChanged1s: Array<Pimark_AdminChanged1>;
  pimarkAdminChanged2s: Array<Pimark_AdminChanged2>;
  pimarkBeaconUpgraded1s: Array<Pimark_BeaconUpgraded1>;
  pimarkBeaconUpgraded2s: Array<Pimark_BeaconUpgraded2>;
  pimarkBidEvents: Array<Pimark_BidEvent>;
  pimarkBidWithdrawns: Array<Pimark_BidWithdrawn>;
  pimarkInitializeds: Array<Pimark_Initialized>;
  pimarkNftBoughts: Array<Pimark_NftBought>;
  pimarkOwnershipTransferreds: Array<Pimark_OwnershipTransferred>;
  pimarkPauseds: Array<Pimark_Paused>;
  pimarkSaleCancelleds: Array<Pimark_SaleCancelled>;
  pimarkSaleCreateds: Array<Pimark_SaleCreated>;
  pimarkSwapAccepteds: Array<Pimark_SwapAccepted>;
  pimarkSwapCancelleds: Array<Pimark_SwapCancelled>;
  pimarkSwapProposeds: Array<Pimark_SwapProposed>;
  pimarkUnpauseds: Array<Pimark_Unpaused>;
  pimarkUpgraded1s: Array<Pimark_Upgraded1>;
  pimarkUpgraded2s: Array<Pimark_Upgraded2>;
  pimarkUpdatedSalePrices: Array<Pimark_UpdatedSalePrice>;
  lendborrowAdminChangeds: Array<Lendborrow_AdminChanged>;
  lendborrowBeaconUpgradeds: Array<Lendborrow_BeaconUpgraded>;
  lendborrowUpgradeds: Array<Lendborrow_Upgraded>;
  validatednftAdminChanged1s: Array<Validatednft_AdminChanged1>;
  validatednftAdminChanged2s: Array<Validatednft_AdminChanged2>;
  validatednftApprovals: Array<Validatednft_Approval>;
  validatednftApprovalForAlls: Array<Validatednft_ApprovalForAll>;
  validatednftBatchMetadataUpdates: Array<Validatednft_BatchMetadataUpdate>;
  validatednftBeaconUpgraded1s: Array<Validatednft_BeaconUpgraded1>;
  validatednftBeaconUpgraded2s: Array<Validatednft_BeaconUpgraded2>;
  validatednftInitializeds: Array<Validatednft_Initialized>;
  validatednftMetadataUpdates: Array<Validatednft_MetadataUpdate>;
  validatednftOwnershipTransferreds: Array<Validatednft_OwnershipTransferred>;
  validatednftPauseds: Array<Validatednft_Paused>;
  validatednftRoyaltiesSetForValidators: Array<Validatednft_RoyaltiesSetForValidator>;
  validatednftTokenMinteds: Array<Validatednft_TokenMinted>;
  validatednftTransfers: Array<Validatednft_Transfer>;
  validatednftUnpauseds: Array<Validatednft_Unpaused>;
  validatednftUpgraded1s: Array<Validatednft_Upgraded1>;
  validatednftUpgraded2s: Array<Validatednft_Upgraded2>;

  constructor(
    acofeeOwnershipTransferreds: Array<Acofee_OwnershipTransferred> = [],
    acofeeSetAconomyNftLendBorrowFees: Array<Acofee_SetAconomyNftLendBorrowFee> = [],
    acofeeSetAconomyPiMarketFees: Array<Acofee_SetAconomyPiMarketFee> = [],
    acofeeSetAconomyPoolFees: Array<Acofee_SetAconomyPoolFee> = [],
    pinftAdminChanged1s: Array<Pinft_AdminChanged1> = [],
    pinftAdminChanged2s: Array<Pinft_AdminChanged2> = [],
    pinftApprovals: Array<Pinft_Approval> = [],
    pinftApprovalForAlls: Array<Pinft_ApprovalForAll> = [],
    pinftBatchMetadataUpdates: Array<Pinft_BatchMetadataUpdate> = [],
    pinftBeaconUpgraded1s: Array<Pinft_BeaconUpgraded1> = [],
    pinftBeaconUpgraded2s: Array<Pinft_BeaconUpgraded2> = [],
    pinftInitializeds: Array<Pinft_Initialized> = [],
    pinftMetadataUpdates: Array<Pinft_MetadataUpdate> = [],
    pinftOwnershipTransferreds: Array<Pinft_OwnershipTransferred> = [],
    pinftPauseds: Array<Pinft_Paused> = [],
    pinftRoyaltiesSetForTokenIds: Array<Pinft_RoyaltiesSetForTokenId> = [],
    pinftRoyaltiesSetForValidators: Array<Pinft_RoyaltiesSetForValidator> = [],
    pinftTokenMinteds: Array<Pinft_TokenMinted> = [],
    pinftTransfers: Array<Pinft_Transfer> = [],
    pinftUnpauseds: Array<Pinft_Unpaused> = [],
    pinftUpgraded1s: Array<Pinft_Upgraded1> = [],
    pinftUpgraded2s: Array<Pinft_Upgraded2> = [],
    pimethAdminChanged1s: Array<Pimeth_AdminChanged1> = [],
    pimethAdminChanged2s: Array<Pimeth_AdminChanged2> = [],
    pimethBeaconUpgraded1s: Array<Pimeth_BeaconUpgraded1> = [],
    pimethBeaconUpgraded2s: Array<Pimeth_BeaconUpgraded2> = [],
    pimethErc20Addeds: Array<Pimeth_Erc20Added> = [],
    pimethErc20Transferreds: Array<Pimeth_Erc20Transferred> = [],
    pimethInitializeds: Array<Pimeth_Initialized> = [],
    pimethOwnershipTransferreds: Array<Pimeth_OwnershipTransferred> = [],
    pimethPauseds: Array<Pimeth_Paused> = [],
    pimethPiNftBurnts: Array<Pimeth_PiNftBurnt> = [],
    pimethPiNftRedeemeds: Array<Pimeth_PiNftRedeemed> = [],
    pimethUnpauseds: Array<Pimeth_Unpaused> = [],
    pimethUpgraded1s: Array<Pimeth_Upgraded1> = [],
    pimethUpgraded2s: Array<Pimeth_Upgraded2> = [],
    pimethValidatorAddeds: Array<Pimeth_ValidatorAdded> = [],
    pimethValidatorFundsRepayeds: Array<Pimeth_ValidatorFundsRepayed> = [],
    pimethValidatorFundsWithdrawns: Array<Pimeth_ValidatorFundsWithdrawn> = [],
    pimarkAdminChanged1s: Array<Pimark_AdminChanged1> = [],
    pimarkAdminChanged2s: Array<Pimark_AdminChanged2> = [],
    pimarkBeaconUpgraded1s: Array<Pimark_BeaconUpgraded1> = [],
    pimarkBeaconUpgraded2s: Array<Pimark_BeaconUpgraded2> = [],
    pimarkBidEvents: Array<Pimark_BidEvent> = [],
    pimarkBidWithdrawns: Array<Pimark_BidWithdrawn> = [],
    pimarkInitializeds: Array<Pimark_Initialized> = [],
    pimarkNftBoughts: Array<Pimark_NftBought> = [],
    pimarkOwnershipTransferreds: Array<Pimark_OwnershipTransferred> = [],
    pimarkPauseds: Array<Pimark_Paused> = [],
    pimarkSaleCancelleds: Array<Pimark_SaleCancelled> = [],
    pimarkSaleCreateds: Array<Pimark_SaleCreated> = [],
    pimarkSwapAccepteds: Array<Pimark_SwapAccepted> = [],
    pimarkSwapCancelleds: Array<Pimark_SwapCancelled> = [],
    pimarkSwapProposeds: Array<Pimark_SwapProposed> = [],
    pimarkUnpauseds: Array<Pimark_Unpaused> = [],
    pimarkUpgraded1s: Array<Pimark_Upgraded1> = [],
    pimarkUpgraded2s: Array<Pimark_Upgraded2> = [],
    pimarkUpdatedSalePrices: Array<Pimark_UpdatedSalePrice> = [],
    lendborrowAdminChangeds: Array<Lendborrow_AdminChanged> = [],
    lendborrowBeaconUpgradeds: Array<Lendborrow_BeaconUpgraded> = [],
    lendborrowUpgradeds: Array<Lendborrow_Upgraded> = [],
    validatednftAdminChanged1s: Array<Validatednft_AdminChanged1> = [],
    validatednftAdminChanged2s: Array<Validatednft_AdminChanged2> = [],
    validatednftApprovals: Array<Validatednft_Approval> = [],
    validatednftApprovalForAlls: Array<Validatednft_ApprovalForAll> = [],
    validatednftBatchMetadataUpdates: Array<Validatednft_BatchMetadataUpdate> = [],
    validatednftBeaconUpgraded1s: Array<Validatednft_BeaconUpgraded1> = [],
    validatednftBeaconUpgraded2s: Array<Validatednft_BeaconUpgraded2> = [],
    validatednftInitializeds: Array<Validatednft_Initialized> = [],
    validatednftMetadataUpdates: Array<Validatednft_MetadataUpdate> = [],
    validatednftOwnershipTransferreds: Array<Validatednft_OwnershipTransferred> = [],
    validatednftPauseds: Array<Validatednft_Paused> = [],
    validatednftRoyaltiesSetForValidators: Array<Validatednft_RoyaltiesSetForValidator> = [],
    validatednftTokenMinteds: Array<Validatednft_TokenMinted> = [],
    validatednftTransfers: Array<Validatednft_Transfer> = [],
    validatednftUnpauseds: Array<Validatednft_Unpaused> = [],
    validatednftUpgraded1s: Array<Validatednft_Upgraded1> = [],
    validatednftUpgraded2s: Array<Validatednft_Upgraded2> = []
  ) {
    this.acofeeOwnershipTransferreds = acofeeOwnershipTransferreds;
    this.acofeeSetAconomyNftLendBorrowFees = acofeeSetAconomyNftLendBorrowFees;
    this.acofeeSetAconomyPiMarketFees = acofeeSetAconomyPiMarketFees;
    this.acofeeSetAconomyPoolFees = acofeeSetAconomyPoolFees;
    this.pinftAdminChanged1s = pinftAdminChanged1s;
    this.pinftAdminChanged2s = pinftAdminChanged2s;
    this.pinftApprovals = pinftApprovals;
    this.pinftApprovalForAlls = pinftApprovalForAlls;
    this.pinftBatchMetadataUpdates = pinftBatchMetadataUpdates;
    this.pinftBeaconUpgraded1s = pinftBeaconUpgraded1s;
    this.pinftBeaconUpgraded2s = pinftBeaconUpgraded2s;
    this.pinftInitializeds = pinftInitializeds;
    this.pinftMetadataUpdates = pinftMetadataUpdates;
    this.pinftOwnershipTransferreds = pinftOwnershipTransferreds;
    this.pinftPauseds = pinftPauseds;
    this.pinftRoyaltiesSetForTokenIds = pinftRoyaltiesSetForTokenIds;
    this.pinftRoyaltiesSetForValidators = pinftRoyaltiesSetForValidators;
    this.pinftTokenMinteds = pinftTokenMinteds;
    this.pinftTransfers = pinftTransfers;
    this.pinftUnpauseds = pinftUnpauseds;
    this.pinftUpgraded1s = pinftUpgraded1s;
    this.pinftUpgraded2s = pinftUpgraded2s;
    this.pimethAdminChanged1s = pimethAdminChanged1s;
    this.pimethAdminChanged2s = pimethAdminChanged2s;
    this.pimethBeaconUpgraded1s = pimethBeaconUpgraded1s;
    this.pimethBeaconUpgraded2s = pimethBeaconUpgraded2s;
    this.pimethErc20Addeds = pimethErc20Addeds;
    this.pimethErc20Transferreds = pimethErc20Transferreds;
    this.pimethInitializeds = pimethInitializeds;
    this.pimethOwnershipTransferreds = pimethOwnershipTransferreds;
    this.pimethPauseds = pimethPauseds;
    this.pimethPiNftBurnts = pimethPiNftBurnts;
    this.pimethPiNftRedeemeds = pimethPiNftRedeemeds;
    this.pimethUnpauseds = pimethUnpauseds;
    this.pimethUpgraded1s = pimethUpgraded1s;
    this.pimethUpgraded2s = pimethUpgraded2s;
    this.pimethValidatorAddeds = pimethValidatorAddeds;
    this.pimethValidatorFundsRepayeds = pimethValidatorFundsRepayeds;
    this.pimethValidatorFundsWithdrawns = pimethValidatorFundsWithdrawns;
    this.pimarkAdminChanged1s = pimarkAdminChanged1s;
    this.pimarkAdminChanged2s = pimarkAdminChanged2s;
    this.pimarkBeaconUpgraded1s = pimarkBeaconUpgraded1s;
    this.pimarkBeaconUpgraded2s = pimarkBeaconUpgraded2s;
    this.pimarkBidEvents = pimarkBidEvents;
    this.pimarkBidWithdrawns = pimarkBidWithdrawns;
    this.pimarkInitializeds = pimarkInitializeds;
    this.pimarkNftBoughts = pimarkNftBoughts;
    this.pimarkOwnershipTransferreds = pimarkOwnershipTransferreds;
    this.pimarkPauseds = pimarkPauseds;
    this.pimarkSaleCancelleds = pimarkSaleCancelleds;
    this.pimarkSaleCreateds = pimarkSaleCreateds;
    this.pimarkSwapAccepteds = pimarkSwapAccepteds;
    this.pimarkSwapCancelleds = pimarkSwapCancelleds;
    this.pimarkSwapProposeds = pimarkSwapProposeds;
    this.pimarkUnpauseds = pimarkUnpauseds;
    this.pimarkUpgraded1s = pimarkUpgraded1s;
    this.pimarkUpgraded2s = pimarkUpgraded2s;
    this.pimarkUpdatedSalePrices = pimarkUpdatedSalePrices;
    this.lendborrowAdminChangeds = lendborrowAdminChangeds;
    this.lendborrowBeaconUpgradeds = lendborrowBeaconUpgradeds;
    this.lendborrowUpgradeds = lendborrowUpgradeds;
    this.validatednftAdminChanged1s = validatednftAdminChanged1s;
    this.validatednftAdminChanged2s = validatednftAdminChanged2s;
    this.validatednftApprovals = validatednftApprovals;
    this.validatednftApprovalForAlls = validatednftApprovalForAlls;
    this.validatednftBatchMetadataUpdates = validatednftBatchMetadataUpdates;
    this.validatednftBeaconUpgraded1s = validatednftBeaconUpgraded1s;
    this.validatednftBeaconUpgraded2s = validatednftBeaconUpgraded2s;
    this.validatednftInitializeds = validatednftInitializeds;
    this.validatednftMetadataUpdates = validatednftMetadataUpdates;
    this.validatednftOwnershipTransferreds = validatednftOwnershipTransferreds;
    this.validatednftPauseds = validatednftPauseds;
    this.validatednftRoyaltiesSetForValidators =
      validatednftRoyaltiesSetForValidators;
    this.validatednftTokenMinteds = validatednftTokenMinteds;
    this.validatednftTransfers = validatednftTransfers;
    this.validatednftUnpauseds = validatednftUnpauseds;
    this.validatednftUpgraded1s = validatednftUpgraded1s;
    this.validatednftUpgraded2s = validatednftUpgraded2s;
  }
}
